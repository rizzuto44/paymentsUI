{
  "address": "0x7e01CA580b878426A1B229686848722135EF0E77",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_messageLibs",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_receiveUln302",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiveUln302View",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzExecutor_Executed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzExecutor_ReceiveLibViewNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzExecutor_Verifying",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer_NativeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Transfer_ToAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Worker_NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Worker_OnlyMessageLib",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Worker_RoleRenouncingDisabled",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "lzReceiveBaseGas",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lzComposeBaseGas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "nativeCap",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct IExecutor.DstConfigParam[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "DstConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IExecutor.NativeDropParams[]",
          "name": "params",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "success",
          "type": "bool[]"
        }
      ],
      "name": "NativeDropApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiveLib",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiveLibView",
          "type": "address"
        }
      ],
      "name": "ReceiveLibViewSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "multiplierBps",
          "type": "uint16"
        }
      ],
      "name": "SetDefaultMultiplierBps",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "SetPriceFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "optionTypes",
          "type": "uint8[]"
        }
      ],
      "name": "SetSupportedOptionTypes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "workerLib",
          "type": "address"
        }
      ],
      "name": "SetWorkerLib",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lib",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMPTY_PAYLOAD_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NIL_PAYLOAD_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_calldataSize",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "assignJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "assignJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiveLib",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcEid",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sender",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Origin",
              "name": "origin",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleExecutorMock.LzReceiveParam",
          "name": "_lzReceiveParam",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleExecutorMock.NativeDropParam[]",
          "name": "_nativeDropParams",
          "type": "tuple[]"
        }
      ],
      "name": "commitAndExecute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        }
      ],
      "name": "compose302",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultMultiplierBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "dstConfig",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "lzReceiveBaseGas",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "multiplierBps",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "floorMarginUSD",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "nativeCap",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "lzComposeBaseGas",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "executable",
      "outputs": [
        {
          "internalType": "enum ExecutionState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcEid",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sender",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Origin",
              "name": "origin",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExecutor.ExecutionParams",
          "name": "_executionParams",
          "type": "tuple"
        }
      ],
      "name": "execute302",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_calldataSize",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "getSupportedOptionTypes",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasAcl",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "initializable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localEidV2",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExecutor.NativeDropParams[]",
          "name": "_nativeDropParams",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_nativeDropGasLimit",
          "type": "uint256"
        }
      ],
      "name": "nativeDrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExecutor.NativeDropParams[]",
          "name": "_nativeDropParams",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_nativeDropGasLimit",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcEid",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sender",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Origin",
              "name": "origin",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExecutor.ExecutionParams",
          "name": "_executionParams",
          "type": "tuple"
        }
      ],
      "name": "nativeDropAndExecute302",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiveLib",
          "type": "address"
        }
      ],
      "name": "receiveLibToView",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiveLibView",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiveUln302",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_multiplierBps",
          "type": "uint16"
        }
      ],
      "name": "setDefaultMultiplierBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "lzReceiveBaseGas",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lzComposeBaseGas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "nativeCap",
              "type": "uint128"
            }
          ],
          "internalType": "struct IExecutor.DstConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setDstConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint8[]",
          "name": "_optionTypes",
          "type": "uint8[]"
        }
      ],
      "name": "setSupportedOptionTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiveLib",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "verifiable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workerFeeLib",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x25d8203d3c00a878c92e1006693dda4cde289bf2d419ab3b5a906454e455655b",
  "receipt": {
    "to": null,
    "from": "0x02Cc42A465170d3e4d98302EfBb0D244a47A8FA1",
    "contractAddress": "0x7e01CA580b878426A1B229686848722135EF0E77",
    "transactionIndex": 119,
    "gasUsed": "2854838",
    "logsBloom": "0x
    "blockHash": "0xbafc8c1c1e3c0ca43bb73a7f88772390c171f1e7e50f5307bfaa6c461aba20b0",
    "transactionHash": "0x25d8203d3c00a878c92e1006693dda4cde289bf2d419ab3b5a906454e455655b",
    "logs": [
      {
        "transactionIndex": 119,
        "blockNumber": 9113466,
        "transactionHash": "0x25d8203d3c00a878c92e1006693dda4cde289bf2d419ab3b5a906454e455655b",
        "address": "0x7e01CA580b878426A1B229686848722135EF0E77",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000002cc42a465170d3e4d98302efbb0d244a47a8fa1",
          "0x00000000000000000000000002cc42a465170d3e4d98302efbb0d244a47a8fa1"
        ],
        "data": "0x",
        "logIndex": 208,
        "blockHash": "0xbafc8c1c1e3c0ca43bb73a7f88772390c171f1e7e50f5307bfaa6c461aba20b0"
      },
      {
        "transactionIndex": 119,
        "blockNumber": 9113466,
        "transactionHash": "0x25d8203d3c00a878c92e1006693dda4cde289bf2d419ab3b5a906454e455655b",
        "address": "0x7e01CA580b878426A1B229686848722135EF0E77",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x00000000000000000000000002cc42a465170d3e4d98302efbb0d244a47a8fa1",
          "0x00000000000000000000000002cc42a465170d3e4d98302efbb0d244a47a8fa1"
        ],
        "data": "0x",
        "logIndex": 209,
        "blockHash": "0xbafc8c1c1e3c0ca43bb73a7f88772390c171f1e7e50f5307bfaa6c461aba20b0"
      },
      {
        "transactionIndex": 119,
        "blockNumber": 9113466,
        "transactionHash": "0x25d8203d3c00a878c92e1006693dda4cde289bf2d419ab3b5a906454e455655b",
        "address": "0x7e01CA580b878426A1B229686848722135EF0E77",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de",
          "0x000000000000000000000000cc1ae8cf5d3904cef3360a9532b477529b177cce",
          "0x00000000000000000000000002cc42a465170d3e4d98302efbb0d244a47a8fa1"
        ],
        "data": "0x",
        "logIndex": 210,
        "blockHash": "0xbafc8c1c1e3c0ca43bb73a7f88772390c171f1e7e50f5307bfaa6c461aba20b0"
      },
      {
        "transactionIndex": 119,
        "blockNumber": 9113466,
        "transactionHash": "0x25d8203d3c00a878c92e1006693dda4cde289bf2d419ab3b5a906454e455655b",
        "address": "0x7e01CA580b878426A1B229686848722135EF0E77",
        "topics": [
          "0x142c46535a86ac791981f3f16bdfd58291f3f03fc3fd111646f3f0e4eb326b63"
        ],
        "data": "0x000000000000000000000000daf00f5ee2158dd58e0d3857851c432e34a3a85100000000000000000000000014b90216c2ceb18427f08d6dd539b32d58a410ad",
        "logIndex": 211,
        "blockHash": "0xbafc8c1c1e3c0ca43bb73a7f88772390c171f1e7e50f5307bfaa6c461aba20b0"
      }
    ],
    "blockNumber": 9113466,
    "cumulativeGasUsed": "14232210",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EDCE65403992e310A62460808c4b910D972f10f",
    [
      "0xcc1ae8Cf5D3904Cef3360A9532B477529b177cCE"
    ],
    "0xdAf00F5eE2158dD58E0d3857851c432E34A3A851",
    "0x14B90216c2CEB18427f08d6Dd539b32D58A410ad"
  ],
  "numDeployments": 1,
  "solcInputHash": "2a25d81b29c9df0cfb510674deac08b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_messageLibs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_receiveUln302\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveUln302View\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzExecutor_Executed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzExecutor_ReceiveLibViewNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzExecutor_Verifying\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer_NativeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Transfer_ToAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Worker_NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Worker_OnlyMessageLib\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Worker_RoleRenouncingDisabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"lzReceiveBaseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lzComposeBaseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nativeCap\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct IExecutor.DstConfigParam[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"DstConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IExecutor.NativeDropParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"success\",\"type\":\"bool[]\"}],\"name\":\"NativeDropApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiveLib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiveLibView\",\"type\":\"address\"}],\"name\":\"ReceiveLibViewSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"}],\"name\":\"SetDefaultMultiplierBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"SetPriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"optionTypes\",\"type\":\"uint8[]\"}],\"name\":\"SetSupportedOptionTypes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workerLib\",\"type\":\"address\"}],\"name\":\"SetWorkerLib\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMPTY_PAYLOAD_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NIL_PAYLOAD_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_calldataSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"assignJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"assignJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiveLib\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleExecutorMock.LzReceiveParam\",\"name\":\"_lzReceiveParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleExecutorMock.NativeDropParam[]\",\"name\":\"_nativeDropParams\",\"type\":\"tuple[]\"}],\"name\":\"commitAndExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"compose302\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMultiplierBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"dstConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"lzReceiveBaseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nativeCap\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lzComposeBaseGas\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"executable\",\"outputs\":[{\"internalType\":\"enum ExecutionState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IExecutor.ExecutionParams\",\"name\":\"_executionParams\",\"type\":\"tuple\"}],\"name\":\"execute302\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_calldataSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"getSupportedOptionTypes\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasAcl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"initializable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localEidV2\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IExecutor.NativeDropParams[]\",\"name\":\"_nativeDropParams\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_nativeDropGasLimit\",\"type\":\"uint256\"}],\"name\":\"nativeDrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IExecutor.NativeDropParams[]\",\"name\":\"_nativeDropParams\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_nativeDropGasLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IExecutor.ExecutionParams\",\"name\":\"_executionParams\",\"type\":\"tuple\"}],\"name\":\"nativeDropAndExecute302\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiveLib\",\"type\":\"address\"}],\"name\":\"receiveLibToView\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiveLibView\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveUln302\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_multiplierBps\",\"type\":\"uint16\"}],\"name\":\"setDefaultMultiplierBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"lzReceiveBaseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lzComposeBaseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nativeCap\",\"type\":\"uint128\"}],\"internalType\":\"struct IExecutor.DstConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setDstConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint8[]\",\"name\":\"_optionTypes\",\"type\":\"uint8[]\"}],\"name\":\"setSupportedOptionTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveLib\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"verifiable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workerFeeLib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"assignJob(address,bytes)\":{\"details\":\"MOCK: Returns hardcoded 0 fee for read operationsOnly authorized message libraries can call this functionVirtual function - can be overridden for custom fee logic\",\"params\":{\"_options\":\"Read operation options (ignored in mock)\",\"_sender\":\"Address requesting the read operation\"},\"returns\":{\"fee\":\"Execution fee (always 0 in mock implementation)\"}},\"assignJob(uint32,address,uint256,bytes)\":{\"details\":\"MOCK: Returns hardcoded 0 fee instead of real calculationOnly authorized message libraries can call this functionVirtual function - can be overridden for custom fee logic\",\"params\":{\"_calldataSize\":\"Size of the execution data\",\"_dstEid\":\"Destination endpoint ID\",\"_options\":\"Execution options (ignored in mock)\",\"_sender\":\"Address requesting the execution\"},\"returns\":{\"fee\":\"Execution fee (always 0 in mock implementation)\"}},\"compose302(address,address,bytes32,uint16,bytes,bytes,uint256)\":{\"details\":\"Only admins can call this functionUses try/catch to handle compose failures gracefully with alerts\",\"params\":{\"_extraData\":\"Additional data for the compose operation\",\"_from\":\"Address that initiated the compose (contains Origin with srcEid, sender, nonce from original message)\",\"_gasLimit\":\"Gas limit for the compose execution\",\"_guid\":\"Global unique identifier for the message\",\"_index\":\"Index of the compose operation\",\"_message\":\"Message payload for the compose\",\"_to\":\"Target contract for the compose operation\"}},\"constructor\":{\"details\":\"Deployer automatically gets both DEFAULT_ADMIN_ROLE and ADMIN_ROLEUses address(0) for price feed since fees are mocked\",\"params\":{\"_endpoint\":\"LayerZero EndpointV2 contract address\",\"_messageLibs\":\"Array of SEND library addresses that can assign jobs. Recommendation: SendUln302, ReadLib1002.\"}},\"executable((uint32,bytes32,uint64),address)\":{\"details\":\"check if a message is executable.\",\"returns\":{\"_0\":\"ExecutionState of Executed, Executable, or NotExecutable\"}},\"execute302((address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))\":{\"details\":\"Only admins can call this functionUses try/catch to handle execution failures gracefully with alertsPart of LayerZero V2 protocol - no ULN301 support\",\"params\":{\"_executionParams\":\"Parameters for message execution including Origin (srcEid, sender, nonce), receiver, guid, message, etc.\"}},\"getFee(address,bytes)\":{\"details\":\"MOCK: Returns hardcoded 0 fee for read operationsReal executor would calculate based on gas costs and price feedsVirtual function - can be overridden for custom fee logic\",\"params\":{\"_options\":\"Read operation options (ignored in mock)\",\"_sender\":\"Address requesting the fee quote\"},\"returns\":{\"fee\":\"Execution fee (always 0 in mock implementation)\"}},\"getFee(uint32,address,uint256,bytes)\":{\"details\":\"MOCK: Returns hardcoded 0 fee instead of real calculationReal executor would calculate based on gas costs and price feedsVirtual function - can be overridden for custom fee logic\",\"params\":{\"_calldataSize\":\"Size of the execution data\",\"_dstEid\":\"Destination endpoint ID\",\"_options\":\"Execution options (ignored in mock)\",\"_sender\":\"Address requesting the fee quote\"},\"returns\":{\"fee\":\"Execution fee (always 0 in mock implementation)\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"nativeDrop((uint32,bytes32,uint64),uint32,address,(address,uint256)[],uint256)\":{\"details\":\"Only admins can call this functionRequires sufficient msg.value to cover all drops\",\"params\":{\"_dstEid\":\"Destination endpoint ID\",\"_nativeDropGasLimit\":\"Gas limit for each native drop call\",\"_nativeDropParams\":\"Array of native drop parameters (receiver, amount)\",\"_oapp\":\"OApp address requesting the drop\",\"_origin\":\"Origin information (srcEid: source chain ID, sender: original sender address, nonce: message sequence)\"}},\"nativeDropAndExecute302((address,uint256)[],uint256,(address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))\":{\"details\":\"Only admins can call this functionFirst performs native drops, then executes with remaining msg.valueUses try/catch for execution failures with alerts\",\"params\":{\"_executionParams\":\"Parameters including Origin (srcEid, sender, nonce) for message execution after drops\",\"_nativeDropGasLimit\":\"Gas limit for each native drop call\",\"_nativeDropParams\":\"Array of native drop parameters (receiver, amount)\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setDstConfig((uint32,uint64,uint64,uint16,uint128,uint128)[])\":{\"details\":\"Only admins can call this functionEmits DstConfigSet event for each configuration update\",\"params\":{\"_params\":\"Array of destination configuration parameters\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"verifiable((uint32,bytes32,uint64),address,address,bytes32)\":{\"details\":\"check if a message is verifiable.\"}},\"title\":\"SimpleExecutorMock\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assignJob(address,bytes)\":{\"notice\":\"Assigns a read operation job (MOCKED - returns 0 fee)\"},\"assignJob(uint32,address,uint256,bytes)\":{\"notice\":\"Assigns a cross-chain execution job (MOCKED - returns 0 fee)\"},\"compose302(address,address,bytes32,uint16,bytes,bytes,uint256)\":{\"notice\":\"Executes a LayerZero V2 compose operation on the endpoint\"},\"constructor\":{\"notice\":\"Deploys SimpleExecutor with deployer as admin\"},\"execute302((address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))\":{\"notice\":\"Executes a LayerZero V2 message on the endpoint\"},\"getFee(address,bytes)\":{\"notice\":\"Queries execution fee for read operations (MOCKED - returns 0)\"},\"getFee(uint32,address,uint256,bytes)\":{\"notice\":\"Queries execution fee for cross-chain operations (MOCKED - returns 0)\"},\"nativeDrop((uint32,bytes32,uint64),uint32,address,(address,uint256)[],uint256)\":{\"notice\":\"Performs native token drops to specified addresses\"},\"nativeDropAndExecute302((address,uint256)[],uint256,(address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))\":{\"notice\":\"Performs native drops and then executes a LayerZero V2 message\"},\"setDstConfig((uint32,uint64,uint64,uint16,uint128,uint128)[])\":{\"notice\":\"Configures execution parameters for destination chains\"}},\"notice\":\"Mock executor for development/testing ONLY - returns 0 fees \\ud83d\\udd27 DIFFERENCES FROM REAL EXECUTOR: - Implements IWorker instead of inheriting Worker - avoids OpenZeppelin v4/v5 conflicts - Constructor-based (not initialize()) - NO price feed - hardcoded 0 fees (virtual methods for override) - NO ULN301 support - V2 operations only - NO real fee calculations or economic incentives \\u26a0\\ufe0f LIMITATIONS: Zero fees break economic model, cannot upgrade, no mainnet use \\u2705 USE FOR: Local testing, unit tests, prototyping \\u274c DON'T USE: Production, mainnet, real transactions \\ud83d\\udcdd NOTE: Origin struct contains cross-chain message provenance:   - srcEid: Source chain endpoint ID (e.g., 40161 for Ethereum)   - sender: Original sender address as bytes32   - nonce: Message sequence number for ordering/deduplication\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/SimpleExecutorMock.sol\":\"SimpleExecutorMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\nimport { IWorker } from \\\"./IWorker.sol\\\";\\nimport { ILayerZeroExecutor } from \\\"./ILayerZeroExecutor.sol\\\";\\nimport { ILayerZeroReadExecutor } from \\\"./ILayerZeroReadExecutor.sol\\\";\\n\\ninterface IExecutor is IWorker, ILayerZeroExecutor, ILayerZeroReadExecutor {\\n    struct DstConfigParam {\\n        uint32 dstEid;\\n        uint64 lzReceiveBaseGas;\\n        uint64 lzComposeBaseGas;\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD;\\n        uint128 nativeCap;\\n    }\\n\\n    struct DstConfig {\\n        uint64 lzReceiveBaseGas;\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD; // uses priceFeed PRICE_RATIO_DENOMINATOR\\n        uint128 nativeCap;\\n        uint64 lzComposeBaseGas;\\n    }\\n\\n    struct ExecutionParams {\\n        address receiver;\\n        Origin origin;\\n        bytes32 guid;\\n        bytes message;\\n        bytes extraData;\\n        uint256 gasLimit;\\n    }\\n\\n    struct NativeDropParams {\\n        address receiver;\\n        uint256 amount;\\n    }\\n\\n    event DstConfigSet(DstConfigParam[] params);\\n    event NativeDropApplied(Origin origin, uint32 dstEid, address oapp, NativeDropParams[] params, bool[] success);\\n\\n    function dstConfig(uint32 _dstEid) external view returns (uint64, uint16, uint128, uint128, uint64);\\n}\\n\",\"keccak256\":\"0x2fd26e454b060ede7afa15f8bbc67bd43f9181b6405ca411d36c8b538be016af\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/ILayerZeroExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroExecutor {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _calldataSize,\\n        bytes calldata _options\\n    ) external returns (uint256 price);\\n\\n    // @notice query the executor price for relaying the payload and its proof to the destination chain\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _calldataSize,\\n        bytes calldata _options\\n    ) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x3647af317ee126b1247a782abb30e59ec5ab21b4945f1d3b4370d1fa3c1bf347\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/ILayerZeroReadExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroReadExecutor {\\n    // @notice query price and assign jobs at the same time\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(address _sender, bytes calldata _options) external returns (uint256 fee);\\n\\n    // @notice query the executor price for executing the payload on this chain\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens\\n    function getFee(address _sender, bytes calldata _options) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0x360936885f173f816ffb47e555d480928e74eb1ad54a76af0f4595ecba2d5657\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IWorker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWorker {\\n    event SetWorkerLib(address workerLib);\\n    event SetPriceFeed(address priceFeed);\\n    event SetDefaultMultiplierBps(uint16 multiplierBps);\\n    event SetSupportedOptionTypes(uint32 dstEid, uint8[] optionTypes);\\n    event Withdraw(address lib, address to, uint256 amount);\\n\\n    error Worker_NotAllowed();\\n    error Worker_OnlyMessageLib();\\n    error Worker_RoleRenouncingDisabled();\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function priceFeed() external view returns (address);\\n\\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external;\\n\\n    function defaultMultiplierBps() external view returns (uint16);\\n\\n    function withdrawFee(address _lib, address _to, uint256 _amount) external;\\n\\n    function setSupportedOptionTypes(uint32 _eid, uint8[] calldata _optionTypes) external;\\n\\n    function getSupportedOptionTypes(uint32 _eid) external view returns (uint8[] memory);\\n}\\n\",\"keccak256\":\"0xa6b61913767305227576cc6da5067de4208f09a4f58bfbfe32beafdfae9869b1\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/UlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// the formal properties are documented in the setter functions\\nstruct UlnConfig {\\n    uint64 confirmations;\\n    // we store the length of required DVNs and optional DVNs instead of using DVN.length directly to save gas\\n    uint8 requiredDVNCount; // 0 indicate DEFAULT, NIL_DVN_COUNT indicate NONE (to override the value of default)\\n    uint8 optionalDVNCount; // 0 indicate DEFAULT, NIL_DVN_COUNT indicate NONE (to override the value of default)\\n    uint8 optionalDVNThreshold; // (0, optionalDVNCount]\\n    address[] requiredDVNs; // no duplicates. sorted an an ascending order. allowed overlap with optionalDVNs\\n    address[] optionalDVNs; // no duplicates. sorted an an ascending order. allowed overlap with requiredDVNs\\n}\\n\\nstruct SetDefaultUlnConfigParam {\\n    uint32 eid;\\n    UlnConfig config;\\n}\\n\\n/// @dev includes the utility functions for checking ULN states and logics\\nabstract contract UlnBase is Ownable {\\n    address private constant DEFAULT_CONFIG = address(0);\\n    // reserved values for\\n    uint8 internal constant DEFAULT = 0;\\n    uint8 internal constant NIL_DVN_COUNT = type(uint8).max;\\n    uint64 internal constant NIL_CONFIRMATIONS = type(uint64).max;\\n    // 127 to prevent total number of DVNs (127 * 2) exceeding uint8.max (255)\\n    // by limiting the total size, it would help constraint the design of DVNOptions\\n    uint8 private constant MAX_COUNT = (type(uint8).max - 1) / 2;\\n\\n    mapping(address oapp => mapping(uint32 eid => UlnConfig)) internal ulnConfigs;\\n\\n    error LZ_ULN_Unsorted();\\n    error LZ_ULN_InvalidRequiredDVNCount();\\n    error LZ_ULN_InvalidOptionalDVNCount();\\n    error LZ_ULN_AtLeastOneDVN();\\n    error LZ_ULN_InvalidOptionalDVNThreshold();\\n    error LZ_ULN_InvalidConfirmations();\\n    error LZ_ULN_UnsupportedEid(uint32 eid);\\n\\n    event DefaultUlnConfigsSet(SetDefaultUlnConfigParam[] params);\\n    event UlnConfigSet(address oapp, uint32 eid, UlnConfig config);\\n\\n    // ============================ OnlyOwner ===================================\\n\\n    /// @dev about the DEFAULT ULN config\\n    /// 1) its values are all LITERAL (e.g. 0 is 0). whereas in the oapp ULN config, 0 (default value) points to the default ULN config\\n    ///     this design enables the oapp to point to DEFAULT config without explicitly setting the config\\n    /// 2) its configuration is more restrictive than the oapp ULN config that\\n    ///     a) it must not use NIL value, where NIL is used only by oapps to indicate the LITERAL 0\\n    ///     b) it must have at least one DVN\\n    function setDefaultUlnConfigs(SetDefaultUlnConfigParam[] calldata _params) external onlyOwner {\\n        for (uint256 i = 0; i < _params.length; ++i) {\\n            SetDefaultUlnConfigParam calldata param = _params[i];\\n\\n            // 2.a must not use NIL\\n            if (param.config.requiredDVNCount == NIL_DVN_COUNT) revert LZ_ULN_InvalidRequiredDVNCount();\\n            if (param.config.optionalDVNCount == NIL_DVN_COUNT) revert LZ_ULN_InvalidOptionalDVNCount();\\n            if (param.config.confirmations == NIL_CONFIRMATIONS) revert LZ_ULN_InvalidConfirmations();\\n\\n            // 2.b must have at least one dvn\\n            _assertAtLeastOneDVN(param.config);\\n\\n            _setConfig(DEFAULT_CONFIG, param.eid, param.config);\\n        }\\n        emit DefaultUlnConfigsSet(_params);\\n    }\\n\\n    // ============================ View ===================================\\n    // @dev assuming most oapps use default, we get default as memory and custom as storage to save gas\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) public view returns (UlnConfig memory rtnConfig) {\\n        UlnConfig storage defaultConfig = ulnConfigs[DEFAULT_CONFIG][_remoteEid];\\n        UlnConfig storage customConfig = ulnConfigs[_oapp][_remoteEid];\\n\\n        // if confirmations is 0, use default\\n        uint64 confirmations = customConfig.confirmations;\\n        if (confirmations == DEFAULT) {\\n            rtnConfig.confirmations = defaultConfig.confirmations;\\n        } else if (confirmations != NIL_CONFIRMATIONS) {\\n            // if confirmations is uint64.max, no block confirmations required\\n            rtnConfig.confirmations = confirmations;\\n        } // else do nothing, rtnConfig.confirmation is 0\\n\\n        if (customConfig.requiredDVNCount == DEFAULT) {\\n            if (defaultConfig.requiredDVNCount > 0) {\\n                // copy only if count > 0. save gas\\n                rtnConfig.requiredDVNs = defaultConfig.requiredDVNs;\\n                rtnConfig.requiredDVNCount = defaultConfig.requiredDVNCount;\\n            } // else, do nothing\\n        } else {\\n            if (customConfig.requiredDVNCount != NIL_DVN_COUNT) {\\n                rtnConfig.requiredDVNs = customConfig.requiredDVNs;\\n                rtnConfig.requiredDVNCount = customConfig.requiredDVNCount;\\n            } // else, do nothing\\n        }\\n\\n        if (customConfig.optionalDVNCount == DEFAULT) {\\n            if (defaultConfig.optionalDVNCount > 0) {\\n                // copy only if count > 0. save gas\\n                rtnConfig.optionalDVNs = defaultConfig.optionalDVNs;\\n                rtnConfig.optionalDVNCount = defaultConfig.optionalDVNCount;\\n                rtnConfig.optionalDVNThreshold = defaultConfig.optionalDVNThreshold;\\n            }\\n        } else {\\n            if (customConfig.optionalDVNCount != NIL_DVN_COUNT) {\\n                rtnConfig.optionalDVNs = customConfig.optionalDVNs;\\n                rtnConfig.optionalDVNCount = customConfig.optionalDVNCount;\\n                rtnConfig.optionalDVNThreshold = customConfig.optionalDVNThreshold;\\n            }\\n        }\\n\\n        // the final value must have at least one dvn\\n        // it is possible that some default config result into 0 dvns\\n        _assertAtLeastOneDVN(rtnConfig);\\n    }\\n\\n    /// @dev Get the uln config without the default config for the given remoteEid.\\n    function getAppUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfig memory) {\\n        return ulnConfigs[_oapp][_remoteEid];\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _setUlnConfig(uint32 _remoteEid, address _oapp, UlnConfig memory _param) internal {\\n        _setConfig(_oapp, _remoteEid, _param);\\n\\n        // get ULN config again as a catch all to ensure the config is valid\\n        getUlnConfig(_oapp, _remoteEid);\\n        emit UlnConfigSet(_oapp, _remoteEid, _param);\\n    }\\n\\n    /// @dev a supported Eid must have a valid default uln config, which has at least one dvn\\n    function _isSupportedEid(uint32 _remoteEid) internal view returns (bool) {\\n        UlnConfig storage defaultConfig = ulnConfigs[DEFAULT_CONFIG][_remoteEid];\\n        return defaultConfig.requiredDVNCount > 0 || defaultConfig.optionalDVNThreshold > 0;\\n    }\\n\\n    function _assertSupportedEid(uint32 _remoteEid) internal view {\\n        if (!_isSupportedEid(_remoteEid)) revert LZ_ULN_UnsupportedEid(_remoteEid);\\n    }\\n\\n    // ============================ Private ===================================\\n\\n    function _assertAtLeastOneDVN(UlnConfig memory _config) private pure {\\n        if (_config.requiredDVNCount == 0 && _config.optionalDVNThreshold == 0) revert LZ_ULN_AtLeastOneDVN();\\n    }\\n\\n    /// @dev this private function is used in both setDefaultUlnConfigs and setUlnConfig\\n    function _setConfig(address _oapp, uint32 _eid, UlnConfig memory _param) private {\\n        // @dev required dvns\\n        // if dvnCount == NONE, dvns list must be empty\\n        // if dvnCount == DEFAULT, dvn list must be empty\\n        // otherwise, dvnList.length == dvnCount and assert the list is valid\\n        if (_param.requiredDVNCount == NIL_DVN_COUNT || _param.requiredDVNCount == DEFAULT) {\\n            if (_param.requiredDVNs.length != 0) revert LZ_ULN_InvalidRequiredDVNCount();\\n        } else {\\n            if (_param.requiredDVNs.length != _param.requiredDVNCount || _param.requiredDVNCount > MAX_COUNT)\\n                revert LZ_ULN_InvalidRequiredDVNCount();\\n            _assertNoDuplicates(_param.requiredDVNs);\\n        }\\n\\n        // @dev optional dvns\\n        // if optionalDVNCount == NONE, optionalDVNs list must be empty and threshold must be 0\\n        // if optionalDVNCount == DEFAULT, optionalDVNs list must be empty and threshold must be 0\\n        // otherwise, optionalDVNs.length == optionalDVNCount, threshold > 0 && threshold <= optionalDVNCount and assert the list is valid\\n\\n        // example use case: an oapp uses the DEFAULT 'required' but\\n        //     a) use a custom 1/1 dvn (practically a required dvn), or\\n        //     b) use a custom 2/3 dvn\\n        if (_param.optionalDVNCount == NIL_DVN_COUNT || _param.optionalDVNCount == DEFAULT) {\\n            if (_param.optionalDVNs.length != 0) revert LZ_ULN_InvalidOptionalDVNCount();\\n            if (_param.optionalDVNThreshold != 0) revert LZ_ULN_InvalidOptionalDVNThreshold();\\n        } else {\\n            if (_param.optionalDVNs.length != _param.optionalDVNCount || _param.optionalDVNCount > MAX_COUNT)\\n                revert LZ_ULN_InvalidOptionalDVNCount();\\n            if (_param.optionalDVNThreshold == 0 || _param.optionalDVNThreshold > _param.optionalDVNCount)\\n                revert LZ_ULN_InvalidOptionalDVNThreshold();\\n            _assertNoDuplicates(_param.optionalDVNs);\\n        }\\n        // don't assert valid count here, as it needs to be validated along side default config\\n\\n        ulnConfigs[_oapp][_eid] = _param;\\n    }\\n\\n    function _assertNoDuplicates(address[] memory _dvns) private pure {\\n        address lastDVN = address(0);\\n        for (uint256 i = 0; i < _dvns.length; i++) {\\n            address dvn = _dvns[i];\\n            if (dvn <= lastDVN) revert LZ_ULN_Unsorted(); // to ensure no duplicates\\n            lastDVN = dvn;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfdb1d04f4996c0a9d35abfbfcf10d978da638885eb77d0a9dc35cea5993074e3\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/interfaces/IReceiveUlnE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @dev should be implemented by the ReceiveUln302 contract and future ReceiveUln contracts on EndpointV2\\ninterface IReceiveUlnE2 {\\n    /// @notice for each dvn to verify the payload\\n    /// @dev this function signature 0x0223536e\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external;\\n\\n    /// @notice verify the payload at endpoint, will check if all DVNs verified\\n    function commitVerification(bytes calldata _packetHeader, bytes32 _payloadHash) external;\\n}\\n\",\"keccak256\":\"0xcdf7e690e5d5c0a3ec26a0d7b1a7fe49c7d16a3634721c3944f77d13ff5d4a91\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/uln302/ReceiveUln302View.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Proxied } from \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\nimport { Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { EndpointV2ViewUpgradeable } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/EndpointV2ViewUpgradeable.sol\\\";\\nimport { UlnConfig } from \\\"../UlnBase.sol\\\";\\n\\nenum VerificationState {\\n    Verifying,\\n    Verifiable,\\n    Verified,\\n    NotInitializable\\n}\\n\\ninterface IReceiveUln302 {\\n    function assertHeader(bytes calldata _packetHeader, uint32 _localEid) external pure;\\n\\n    function verifiable(\\n        UlnConfig memory _config,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash\\n    ) external view returns (bool);\\n\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfig memory rtnConfig);\\n}\\n\\ncontract ReceiveUln302View is EndpointV2ViewUpgradeable, Proxied {\\n    using PacketV1Codec for bytes;\\n\\n    IReceiveUln302 public receiveUln302;\\n    uint32 internal localEid;\\n\\n    function initialize(address _endpoint, address _receiveUln302) external proxied initializer {\\n        __EndpointV2View_init(_endpoint);\\n        receiveUln302 = IReceiveUln302(_receiveUln302);\\n        localEid = endpoint.eid();\\n    }\\n\\n    /// @dev a ULN verifiable requires it to be endpoint verifiable and committable\\n    function verifiable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (VerificationState) {\\n        receiveUln302.assertHeader(_packetHeader, localEid);\\n\\n        address receiver = _packetHeader.receiverB20();\\n\\n        Origin memory origin = Origin(_packetHeader.srcEid(), _packetHeader.sender(), _packetHeader.nonce());\\n\\n        // check endpoint initializable\\n        if (!initializable(origin, receiver)) {\\n            return VerificationState.NotInitializable;\\n        }\\n\\n        // check endpoint verifiable\\n        if (!_endpointVerifiable(origin, receiver, _payloadHash)) {\\n            return VerificationState.Verified;\\n        }\\n\\n        // check uln verifiable\\n        if (\\n            receiveUln302.verifiable(\\n                receiveUln302.getUlnConfig(receiver, origin.srcEid),\\n                keccak256(_packetHeader),\\n                _payloadHash\\n            )\\n        ) {\\n            return VerificationState.Verifiable;\\n        }\\n        return VerificationState.Verifying;\\n    }\\n\\n    /// @dev checks for endpoint verifiable and endpoint has payload hash\\n    function _endpointVerifiable(\\n        Origin memory origin,\\n        address _receiver,\\n        bytes32 _payloadHash\\n    ) internal view returns (bool) {\\n        // check endpoint verifiable\\n        if (!verifiable(origin, _receiver, address(receiveUln302), _payloadHash)) return false;\\n\\n        // if endpoint.verifiable, also check if the payload hash matches\\n        // endpoint allows re-verify, check if this payload has already been verified\\n        if (endpoint.inboundPayloadHash(_receiver, origin.srcEid, origin.sender, origin.nonce) == _payloadHash)\\n            return false;\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x97920987fbc604397a20b16153b24164642fff6fa2a4419dcac31facf0605a41\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/EndpointV2View.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Proxied } from \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"./EndpointV2ViewUpgradeable.sol\\\";\\n\\ncontract EndpointV2View is EndpointV2ViewUpgradeable, Proxied {\\n    function initialize(address _endpoint) external proxied initializer {\\n        __EndpointV2View_init(_endpoint);\\n    }\\n}\\n\",\"keccak256\":\"0x8ce2aa4314153a9d631a55cf9dc49d03e44eacbf244ac8f96563793149df91dc\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/EndpointV2ViewUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\nenum ExecutionState {\\n    NotExecutable, // executor: waits for PayloadVerified event and starts polling for executable\\n    VerifiedButNotExecutable, // executor: starts active polling for executable\\n    Executable,\\n    Executed\\n}\\n\\ncontract EndpointV2ViewUpgradeable is Initializable {\\n    bytes32 public constant EMPTY_PAYLOAD_HASH = bytes32(0);\\n    bytes32 public constant NIL_PAYLOAD_HASH = bytes32(type(uint256).max);\\n\\n    ILayerZeroEndpointV2 public endpoint;\\n\\n    function __EndpointV2View_init(address _endpoint) internal onlyInitializing {\\n        __EndpointV2View_init_unchained(_endpoint);\\n    }\\n\\n    function __EndpointV2View_init_unchained(address _endpoint) internal onlyInitializing {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n    }\\n\\n    function initializable(Origin memory _origin, address _receiver) public view returns (bool) {\\n        try endpoint.initializable(_origin, _receiver) returns (bool _initializable) {\\n            return _initializable;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /// @dev check if a message is verifiable.\\n    function verifiable(\\n        Origin memory _origin,\\n        address _receiver,\\n        address _receiveLib,\\n        bytes32 _payloadHash\\n    ) public view returns (bool) {\\n        if (!endpoint.isValidReceiveLibrary(_receiver, _origin.srcEid, _receiveLib)) return false;\\n\\n        if (!endpoint.verifiable(_origin, _receiver)) return false;\\n\\n        // checked in _inbound for verify\\n        if (_payloadHash == EMPTY_PAYLOAD_HASH) return false;\\n\\n        return true;\\n    }\\n\\n    /// @dev check if a message is executable.\\n    /// @return ExecutionState of Executed, Executable, or NotExecutable\\n    function executable(Origin memory _origin, address _receiver) public view returns (ExecutionState) {\\n        bytes32 payloadHash = endpoint.inboundPayloadHash(_receiver, _origin.srcEid, _origin.sender, _origin.nonce);\\n\\n        // executed if the payload hash has been cleared and the nonce is less than or equal to lazyInboundNonce\\n        if (\\n            payloadHash == EMPTY_PAYLOAD_HASH &&\\n            _origin.nonce <= endpoint.lazyInboundNonce(_receiver, _origin.srcEid, _origin.sender)\\n        ) {\\n            return ExecutionState.Executed;\\n        }\\n\\n        // executable if nonce has not been executed and has not been nilified and nonce is less than or equal to inboundNonce\\n        if (\\n            payloadHash != NIL_PAYLOAD_HASH &&\\n            _origin.nonce <= endpoint.inboundNonce(_receiver, _origin.srcEid, _origin.sender)\\n        ) {\\n            return ExecutionState.Executable;\\n        }\\n\\n        // only start active executable polling if payload hash is not empty nor nil\\n        if (payloadHash != EMPTY_PAYLOAD_HASH && payloadHash != NIL_PAYLOAD_HASH) {\\n            return ExecutionState.VerifiedButNotExecutable;\\n        }\\n\\n        // return NotExecutable as a catch-all\\n        return ExecutionState.NotExecutable;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3947d47849f0bdf5992248024869a50d4a183ec3e992dcfedfbaf64918e8b6b1\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { SetConfigParam } from \\\"./IMessageLibManager.sol\\\";\\n\\nenum MessageLibType {\\n    Send,\\n    Receive,\\n    SendAndReceive\\n}\\n\\ninterface IMessageLib is IERC165 {\\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\\n\\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n\\n    function messageLibType() external view returns (MessageLibType);\\n}\\n\",\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { MessagingFee } from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib } from \\\"./IMessageLib.sol\\\";\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\ninterface ISendLib is IMessageLib {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\\n\\n    function quote(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Transfer {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ADDRESS_ZERO = address(0);\\n\\n    error Transfer_NativeFailed(address _to, uint256 _value);\\n    error Transfer_ToAddressIsZero();\\n\\n    function native(address _to, uint256 _value) internal {\\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\\n        (bool success, ) = _to.call{ value: _value }(\\\"\\\");\\n        if (!success) revert Transfer_NativeFailed(_to, _value);\\n    }\\n\\n    function token(address _token, address _to, uint256 _value) internal {\\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\\n        IERC20(_token).safeTransfer(_to, _value);\\n    }\\n\\n    function nativeOrToken(address _token, address _to, uint256 _value) internal {\\n        if (_token == ADDRESS_ZERO) {\\n            native(_to, _value);\\n        } else {\\n            token(_token, _to, _value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x621d6dd5b8b7e827351459fff4ac87c16ba4656757592cf67de8b199aea4cf9a\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Packet } from \\\"../../interfaces/ISendLib.sol\\\";\\nimport { AddressCast } from \\\"../../libs/AddressCast.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    uint8 internal constant PACKET_VERSION = 1;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint256 private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint256 private constant SRC_EID_OFFSET = 9;\\n    uint256 private constant SENDER_OFFSET = 13;\\n    uint256 private constant DST_EID_OFFSET = 45;\\n    uint256 private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint256 private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            PACKET_VERSION,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                PACKET_VERSION,\\n                _packet.nonce,\\n                _packet.srcEid,\\n                _packet.sender.toBytes32(),\\n                _packet.dstEid,\\n                _packet.receiver\\n            );\\n    }\\n\\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_packet.guid, _packet.message);\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0xc84cf1bf785977fe1fbe7566eef902c2db68d0e163813ebe6c34921754802680\",\"license\":\"LZBL-1.2\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a6b4f6b7798ab80929d491b89d5427a9b3338c0fd1acd0ba325f69c6f1646af\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/mocks/SimpleExecutorMock.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport { ILayerZeroEndpointV2, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { Transfer } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol\\\";\\nimport { ExecutionState, EndpointV2View } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/EndpointV2View.sol\\\";\\n\\nimport { IExecutor } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IExecutor.sol\\\";\\nimport { IWorker } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IWorker.sol\\\";\\nimport { VerificationState } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/uln302/ReceiveUln302View.sol\\\";\\nimport { IReceiveUlnE2 } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/interfaces/IReceiveUlnE2.sol\\\";\\n\\n// Lightweight view interface to query verifiability from the ReceiveUln view\\ninterface IReceiveUlnView {\\n    function verifiable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (VerificationState);\\n}\\n\\n/**\\n * @title SimpleExecutorMock\\n * @notice Mock executor for development/testing ONLY - returns 0 fees\\n *\\n * \\ud83d\\udd27 DIFFERENCES FROM REAL EXECUTOR:\\n * - Implements IWorker instead of inheriting Worker - avoids OpenZeppelin v4/v5 conflicts\\n * - Constructor-based (not initialize())\\n * - NO price feed - hardcoded 0 fees (virtual methods for override)\\n * - NO ULN301 support - V2 operations only\\n * - NO real fee calculations or economic incentives\\n *\\n * \\u26a0\\ufe0f LIMITATIONS: Zero fees break economic model, cannot upgrade, no mainnet use\\n * \\u2705 USE FOR: Local testing, unit tests, prototyping\\n * \\u274c DON'T USE: Production, mainnet, real transactions\\n *\\n * \\ud83d\\udcdd NOTE: Origin struct contains cross-chain message provenance:\\n *   - srcEid: Source chain endpoint ID (e.g., 40161 for Ethereum)\\n *   - sender: Original sender address as bytes32\\n *   - nonce: Message sequence number for ordering/deduplication\\n */\\ncontract SimpleExecutorMock is IWorker, AccessControl, ReentrancyGuard, IExecutor, EndpointV2View {\\n    bytes32 internal constant MESSAGE_LIB_ROLE = keccak256(\\\"MESSAGE_LIB_ROLE\\\");\\n    bytes32 internal constant ALLOWLIST = keccak256(\\\"ALLOWLIST\\\");\\n    bytes32 internal constant DENYLIST = keccak256(\\\"DENYLIST\\\");\\n    bytes32 internal constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    mapping(uint32 dstEid => DstConfig) public dstConfig;\\n\\n    // endpoint v2 (inherited from EndpointV2View)\\n    uint32 public localEidV2;\\n\\n    // Optional ULN receive lib to use (overrides _receiveLib when set)\\n    address public receiveUln302;\\n\\n    // Mapping from receive lib to its view contract\\n    mapping(address receiveLib => address receiveLibView) public receiveLibToView;\\n\\n    event ReceiveLibViewSet(address _receiveLib, address _receiveLibView);\\n\\n    // Worker state variables (kept minimal for tests)\\n    address public workerFeeLib;\\n    uint64 public allowlistSize;\\n    uint16 public defaultMultiplierBps;\\n    address public priceFeed;\\n    mapping(uint32 eid => uint8[] optionTypes) internal supportedOptionTypes;\\n\\n    /**\\n     * @notice Deploys SimpleExecutor with deployer as admin\\n     * @param _endpoint LayerZero EndpointV2 contract address\\n     * @param _messageLibs Array of SEND library addresses that can assign jobs. Recommendation: SendUln302, ReadLib1002.\\n     * @dev Deployer automatically gets both DEFAULT_ADMIN_ROLE and ADMIN_ROLE\\n     * @dev Uses address(0) for price feed since fees are mocked\\n     */\\n    constructor(address _endpoint, address[] memory _messageLibs, address _receiveUln302, address _receiveUln302View) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n        localEidV2 = endpoint.eid();\\n\\n        // Initialize Worker-like state\\n        defaultMultiplierBps = 12000;\\n        priceFeed = address(0);\\n\\n        // Grant roles to deployer\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n\\n        // Grant MESSAGE_LIB_ROLE to provided message libs\\n        for (uint256 i = 0; i < _messageLibs.length; ++i) {\\n            _grantRole(MESSAGE_LIB_ROLE, _messageLibs[i]);\\n        }\\n\\n        // Initialize receive lib and its view for verification checks used in commitAndExecute\\n        receiveUln302 = _receiveUln302;\\n        receiveLibToView[_receiveUln302] = _receiveUln302View;\\n        emit ReceiveLibViewSet(_receiveUln302, _receiveUln302View);\\n    }\\n\\n    // --- Worker Interface Implementation ---\\n\\n    function withdrawFee(address _lib, address _to, uint256 _amount) external onlyRole(ADMIN_ROLE) {\\n        if (!hasRole(MESSAGE_LIB_ROLE, _lib)) revert Worker_OnlyMessageLib();\\n        // Mock implementation - in real Worker this would call ISendLib(_lib).withdrawFee(_to, _amount);\\n        emit Withdraw(_lib, _to, _amount);\\n    }\\n\\n    // --- Worker-required functions (IWorker) ---\\n\\n    function setPriceFeed(address _priceFeed) external onlyRole(ADMIN_ROLE) {\\n        priceFeed = _priceFeed;\\n        emit SetPriceFeed(_priceFeed);\\n    }\\n\\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external onlyRole(ADMIN_ROLE) {\\n        defaultMultiplierBps = _multiplierBps;\\n        emit SetDefaultMultiplierBps(_multiplierBps);\\n    }\\n\\n    function setSupportedOptionTypes(uint32 _eid, uint8[] calldata _optionTypes) external onlyRole(ADMIN_ROLE) {\\n        supportedOptionTypes[_eid] = _optionTypes;\\n        emit SetSupportedOptionTypes(_eid, _optionTypes);\\n    }\\n\\n    function getSupportedOptionTypes(uint32 _eid) external view returns (uint8[] memory) {\\n        return supportedOptionTypes[_eid];\\n    }\\n\\n    // --- Worker-like functionality ---\\n\\n    modifier onlyAcl(address _sender) {\\n        if (!hasAcl(_sender)) {\\n            revert Worker_NotAllowed();\\n        }\\n        _;\\n    }\\n\\n    function hasAcl(address _sender) public view returns (bool) {\\n        if (hasRole(DENYLIST, _sender)) {\\n            return false;\\n        } else if (allowlistSize == 0 || hasRole(ALLOWLIST, _sender)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Override AccessControl to handle allowlist counting\\n    function _grantRole(bytes32 _role, address _account) internal override returns (bool) {\\n        if (_role == ALLOWLIST && !hasRole(_role, _account)) {\\n            ++allowlistSize;\\n        }\\n        return super._grantRole(_role, _account);\\n    }\\n\\n    function _revokeRole(bytes32 _role, address _account) internal override returns (bool) {\\n        if (_role == ALLOWLIST && hasRole(_role, _account)) {\\n            --allowlistSize;\\n        }\\n        return super._revokeRole(_role, _account);\\n    }\\n\\n    function renounceRole(bytes32 /*role*/, address /*account*/) public pure override {\\n        revert Worker_RoleRenouncingDisabled();\\n    }\\n\\n    // --- Admin ---\\n    /**\\n     * @notice Configures execution parameters for destination chains\\n     * @param _params Array of destination configuration parameters\\n     * @dev Only admins can call this function\\n     * @dev Emits DstConfigSet event for each configuration update\\n     */\\n    function setDstConfig(DstConfigParam[] memory _params) external onlyRole(ADMIN_ROLE) {\\n        for (uint256 i = 0; i < _params.length; i++) {\\n            DstConfigParam memory param = _params[i];\\n            dstConfig[param.dstEid] = DstConfig(\\n                param.lzReceiveBaseGas,\\n                param.multiplierBps,\\n                param.floorMarginUSD,\\n                param.nativeCap,\\n                param.lzComposeBaseGas\\n            );\\n        }\\n        emit DstConfigSet(_params);\\n    }\\n\\n    /**\\n     * @notice Performs native token drops to specified addresses\\n     * @param _origin Origin information (srcEid: source chain ID, sender: original sender address, nonce: message sequence)\\n     * @param _dstEid Destination endpoint ID\\n     * @param _oapp OApp address requesting the drop\\n     * @param _nativeDropParams Array of native drop parameters (receiver, amount)\\n     * @param _nativeDropGasLimit Gas limit for each native drop call\\n     * @dev Only admins can call this function\\n     * @dev Requires sufficient msg.value to cover all drops\\n     */\\n    function nativeDrop(\\n        Origin calldata _origin,\\n        uint32 _dstEid,\\n        address _oapp,\\n        NativeDropParams[] calldata _nativeDropParams,\\n        uint256 _nativeDropGasLimit\\n    ) external payable onlyRole(ADMIN_ROLE) nonReentrant {\\n        _nativeDrop(_origin, _dstEid, _oapp, _nativeDropParams, _nativeDropGasLimit);\\n    }\\n\\n    /**\\n     * @notice Executes a LayerZero V2 message on the endpoint\\n     * @param _executionParams Parameters for message execution including Origin (srcEid, sender, nonce), receiver, guid, message, etc.\\n     * @dev Only admins can call this function\\n     * @dev Uses try/catch to handle execution failures gracefully with alerts\\n     * @dev Part of LayerZero V2 protocol - no ULN301 support\\n     */\\n    function execute302(ExecutionParams calldata _executionParams) external payable onlyRole(ADMIN_ROLE) nonReentrant {\\n        endpoint.lzReceive{ value: msg.value, gas: _executionParams.gasLimit }(\\n            _executionParams.origin,\\n            _executionParams.receiver,\\n            _executionParams.guid,\\n            _executionParams.message,\\n            _executionParams.extraData\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes a LayerZero V2 compose operation on the endpoint\\n     * @param _from Address that initiated the compose (contains Origin with srcEid, sender, nonce from original message)\\n     * @param _to Target contract for the compose operation\\n     * @param _guid Global unique identifier for the message\\n     * @param _index Index of the compose operation\\n     * @param _message Message payload for the compose\\n     * @param _extraData Additional data for the compose operation\\n     * @param _gasLimit Gas limit for the compose execution\\n     * @dev Only admins can call this function\\n     * @dev Uses try/catch to handle compose failures gracefully with alerts\\n     */\\n    function compose302(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData,\\n        uint256 _gasLimit\\n    ) external payable onlyRole(ADMIN_ROLE) nonReentrant {\\n        endpoint.lzCompose{ value: msg.value, gas: _gasLimit }(_from, _to, _guid, _index, _message, _extraData);\\n    }\\n\\n    /**\\n     * @notice Performs native drops and then executes a LayerZero V2 message\\n     * @param _nativeDropParams Array of native drop parameters (receiver, amount)\\n     * @param _nativeDropGasLimit Gas limit for each native drop call\\n     * @param _executionParams Parameters including Origin (srcEid, sender, nonce) for message execution after drops\\n     * @dev Only admins can call this function\\n     * @dev First performs native drops, then executes with remaining msg.value\\n     * @dev Uses try/catch for execution failures with alerts\\n     */\\n    function nativeDropAndExecute302(\\n        NativeDropParams[] calldata _nativeDropParams,\\n        uint256 _nativeDropGasLimit,\\n        ExecutionParams calldata _executionParams\\n    ) external payable onlyRole(ADMIN_ROLE) nonReentrant {\\n        uint256 spent = _nativeDrop(\\n            _executionParams.origin,\\n            localEidV2,\\n            _executionParams.receiver,\\n            _nativeDropParams,\\n            _nativeDropGasLimit\\n        );\\n\\n        uint256 value = msg.value - spent;\\n        endpoint.lzReceive{ value: value, gas: _executionParams.gasLimit }(\\n            _executionParams.origin,\\n            _executionParams.receiver,\\n            _executionParams.guid,\\n            _executionParams.message,\\n            _executionParams.extraData\\n        );\\n    }\\n\\n    // ============================ Admin (Views) ===================================\\n\\n    // ============================ External ===================================\\n    /// @notice process for commit and execute\\n    /// 1. check if executable, revert if executed, execute if executable\\n    /// 2. check if verifiable, revert if verifying, commit if verifiable\\n    /// 3. native drop\\n    /// 4. try execute, will revert if not executable\\n    struct LzReceiveParam {\\n        Origin origin;\\n        address receiver;\\n        bytes32 guid;\\n        bytes message;\\n        bytes extraData;\\n        uint256 gas;\\n        uint256 value;\\n    }\\n\\n    struct NativeDropParam {\\n        address _receiver;\\n        uint256 _amount;\\n    }\\n\\n    function commitAndExecute(\\n        address _receiveLib,\\n        LzReceiveParam calldata _lzReceiveParam,\\n        NativeDropParam[] calldata _nativeDropParams\\n    ) external payable {\\n        // 1. check if executable, revert if executed\\n        ExecutionState executionState = executable(_lzReceiveParam.origin, _lzReceiveParam.receiver);\\n        if (executionState == ExecutionState.Executed) revert LzExecutor_Executed();\\n\\n        // 2. if not executable, check if verifiable, revert if verifying, commit if verifiable\\n        if (executionState != ExecutionState.Executable) {\\n            address receiveLib = receiveUln302 == address(0x0) ? _receiveLib : address(receiveUln302);\\n            bytes memory packetHeader = abi.encodePacked(\\n                uint8(1), // packet version 1\\n                _lzReceiveParam.origin.nonce,\\n                _lzReceiveParam.origin.srcEid,\\n                _lzReceiveParam.origin.sender,\\n                localEidV2,\\n                bytes32(uint256(uint160(_lzReceiveParam.receiver)))\\n            );\\n            bytes32 payloadHash = keccak256(abi.encodePacked(_lzReceiveParam.guid, _lzReceiveParam.message));\\n\\n            address receiveLibView = receiveLibToView[receiveLib];\\n            if (receiveLibView == address(0x0)) revert LzExecutor_ReceiveLibViewNotSet();\\n\\n            VerificationState verificationState = IReceiveUlnView(receiveLibView).verifiable(packetHeader, payloadHash);\\n            if (verificationState == VerificationState.Verifiable) {\\n                // verification required\\n                IReceiveUlnE2(receiveLib).commitVerification(packetHeader, payloadHash);\\n            } else if (verificationState == VerificationState.Verifying) {\\n                revert LzExecutor_Verifying();\\n            }\\n        }\\n\\n        // 3. native drop\\n        for (uint256 i = 0; i < _nativeDropParams.length; i++) {\\n            NativeDropParam calldata param = _nativeDropParams[i];\\n            Transfer.native(param._receiver, param._amount);\\n        }\\n\\n        // 4. try execute, will revert if not executable\\n        endpoint.lzReceive{ gas: _lzReceiveParam.gas, value: _lzReceiveParam.value }(\\n            _lzReceiveParam.origin,\\n            _lzReceiveParam.receiver,\\n            _lzReceiveParam.guid,\\n            _lzReceiveParam.message,\\n            _lzReceiveParam.extraData\\n        );\\n    }\\n\\n    // Errors mirrored from DestinationExecutorMock for parity\\n    error LzExecutor_Executed();\\n    error LzExecutor_Verifying();\\n    error LzExecutor_ReceiveLibViewNotSet();\\n\\n    // --- Message Lib (MOCKED - Returns 0 fees) ---\\n    /**\\n     * @notice Assigns a cross-chain execution job (MOCKED - returns 0 fee)\\n     * @param _dstEid Destination endpoint ID\\n     * @param _sender Address requesting the execution\\n     * @param _calldataSize Size of the execution data\\n     * @param _options Execution options (ignored in mock)\\n     * @return fee Execution fee (always 0 in mock implementation)\\n     * @dev MOCK: Returns hardcoded 0 fee instead of real calculation\\n     * @dev Only authorized message libraries can call this function\\n     * @dev Virtual function - can be overridden for custom fee logic\\n     */\\n    function assignJob(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _calldataSize,\\n        bytes calldata _options\\n    ) external virtual onlyRole(MESSAGE_LIB_ROLE) onlyAcl(_sender) returns (uint256 fee) {\\n        fee = 0; // MOCK: Override for custom fee logic\\n    }\\n\\n    /**\\n     * @notice Assigns a read operation job (MOCKED - returns 0 fee)\\n     * @param _sender Address requesting the read operation\\n     * @param _options Read operation options (ignored in mock)\\n     * @return fee Execution fee (always 0 in mock implementation)\\n     * @dev MOCK: Returns hardcoded 0 fee for read operations\\n     * @dev Only authorized message libraries can call this function\\n     * @dev Virtual function - can be overridden for custom fee logic\\n     */\\n    function assignJob(\\n        address _sender,\\n        bytes calldata _options\\n    ) external virtual onlyRole(MESSAGE_LIB_ROLE) onlyAcl(_sender) returns (uint256 fee) {\\n        fee = 0; // MOCK: Override for custom fee logic\\n    }\\n\\n    // --- Fee Queries (MOCKED - Returns 0 fees) ---\\n    /**\\n     * @notice Queries execution fee for cross-chain operations (MOCKED - returns 0)\\n     * @param _dstEid Destination endpoint ID\\n     * @param _sender Address requesting the fee quote\\n     * @param _calldataSize Size of the execution data\\n     * @param _options Execution options (ignored in mock)\\n     * @return fee Execution fee (always 0 in mock implementation)\\n     * @dev MOCK: Returns hardcoded 0 fee instead of real calculation\\n     * @dev Real executor would calculate based on gas costs and price feeds\\n     * @dev Virtual function - can be overridden for custom fee logic\\n     */\\n    function getFee(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _calldataSize,\\n        bytes calldata _options\\n    ) external view virtual onlyAcl(_sender) returns (uint256 fee) {\\n        fee = 0; // MOCK: Override for custom fee logic\\n    }\\n\\n    /**\\n     * @notice Queries execution fee for read operations (MOCKED - returns 0)\\n     * @param _sender Address requesting the fee quote\\n     * @param _options Read operation options (ignored in mock)\\n     * @return fee Execution fee (always 0 in mock implementation)\\n     * @dev MOCK: Returns hardcoded 0 fee for read operations\\n     * @dev Real executor would calculate based on gas costs and price feeds\\n     * @dev Virtual function - can be overridden for custom fee logic\\n     */\\n    function getFee(\\n        address _sender,\\n        bytes calldata _options\\n    ) external view virtual onlyAcl(_sender) returns (uint256 fee) {\\n        fee = 0; // MOCK: Override for custom fee logic\\n    }\\n\\n    /**\\n     * @notice Internal function to perform native token drops\\n     * @param _origin Origin information for the drop operation\\n     * @param _dstEid Destination endpoint ID\\n     * @param _oapp OApp address requesting the drops\\n     * @param _nativeDropParams Array of drop parameters (receiver, amount)\\n     * @param _nativeDropGasLimit Gas limit for each individual drop call\\n     * @return spent Total amount of native tokens spent on drops\\n     * @dev Attempts to send native tokens to each receiver with specified gas limit\\n     * @dev Emits NativeDropApplied event with success status for each drop\\n     */\\n    function _nativeDrop(\\n        Origin calldata _origin,\\n        uint32 _dstEid,\\n        address _oapp,\\n        NativeDropParams[] calldata _nativeDropParams,\\n        uint256 _nativeDropGasLimit\\n    ) internal returns (uint256 spent) {\\n        bool[] memory success = new bool[](_nativeDropParams.length);\\n        for (uint256 i = 0; i < _nativeDropParams.length; i++) {\\n            NativeDropParams memory param = _nativeDropParams[i];\\n\\n            (bool sent, ) = param.receiver.call{ value: param.amount, gas: _nativeDropGasLimit }(\\\"\\\");\\n\\n            success[i] = sent;\\n            spent += param.amount;\\n        }\\n        emit NativeDropApplied(_origin, _dstEid, _oapp, _nativeDropParams, success);\\n    }\\n}\\n\",\"keccak256\":\"0xd3a885f978c2cad04dd2fdb40ac05ef8380b15bbcb8148f130d41726bba5aadf\",\"license\":\"LZBL-1.2\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003428380380620034288339810160408190526200003491620003c0565b60018055600280546001600160a01b0319166001600160a01b0386169081179091556040805163416ecebf60e01b8152905163416ecebf916004808201926020929091908290030181865afa15801562000092573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b89190620004ce565b6035805463ffffffff191663ffffffff929092169190911790556037805461ffff60e01b191661017760e51b179055603880546001600160a01b0319169055620001046000336200022a565b50620001317fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336200022a565b5060005b835181101562000197576200018d7f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de858381518110620001795762000179620004fd565b60200260200101516200022a60201b60201c565b5060010162000135565b5060358054600160201b600160c01b0319166401000000006001600160a01b038581169182029290921790925560008281526036602090815260409182902080546001600160a01b031916938616938417905581519384528301919091527f142c46535a86ac791981f3f16bdfd58291f3f03fc3fd111646f3f0e4eb326b63910160405180910390a15050505062000550565b60007f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca831480156200027d57506000838152602081815260408083206001600160a01b038616845290915290205460ff16155b15620002ca5760378054601490620002a590600160a01b90046001600160401b031662000513565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b620002d68383620002df565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000384576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556200033b3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001620002d9565b506000620002d9565b80516001600160a01b0381168114620003a557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215620003d757600080fd5b620003e2856200038d565b602086810151919550906001600160401b03808211156200040257600080fd5b818801915088601f8301126200041757600080fd5b8151818111156200042c576200042c620003aa565b8060051b604051601f19603f83011681018181108582111715620004545762000454620003aa565b60405291825284820192508381018501918b8311156200047357600080fd5b938501935b828510156200049c576200048c856200038d565b8452938501939285019262000478565b809850505050505050620004b3604086016200038d565b9150620004c3606086016200038d565b905092959194509250565b600060208284031215620004e157600080fd5b815163ffffffff81168114620004f657600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038281166002600160401b031981016200054657634e487b7160e01b600052601160045260246000fd5b6001019392505050565b612ec880620005606000396000f3fe6080604052600436106102245760003560e01c8063843c7b0e11610123578063c4d66de8116100ab578063d2ae21041161006f578063d2ae210414610709578063d547741f14610748578063dcfdeb6014610768578063e1e3a7df1461077b578063e395eb5c1461079b57600080fd5b8063c4d66de814610696578063c8f8dcd1146106b6578063cb5026b914610621578063cd88b903146106d6578063cfc32570146106f657600080fd5b80639e944965116100f25780639e94496514610572578063a217fddf14610621578063c015bb7d14610636578063c358de0a14610656578063c416aa511461067657600080fd5b8063843c7b0e146104f7578063861e1ca51461051f5780638624ba071461053f57806391d148541461055257600080fd5b80633d85ac33116101b1578063709eb66411610175578063709eb66414610464578063717e8a4214610484578063724e78da146104a4578063741bef1a146104c45780637cd44734146104e457600080fd5b80633d85ac3314610396578063475b6d9e146103b65780634b4b2efb146103c95780635e280f11146103f65780636f1788351461042e57600080fd5b806326e67a37116101f857806326e67a37146102f35780632baf0be7146103205780632de11376146103365780632f2ff15d1461035657806336568abe1461037657600080fd5b8062bf2e801461022957806301ffc9a7146102635780631095b6d714610293578063248a9ca3146102b5575b600080fd5b34801561023557600080fd5b5060375461024b90600160e01b900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561026f57600080fd5b5061028361027e366004612063565b6107cd565b604051901515815260200161025a565b34801561029f57600080fd5b506102b36102ae3660046120a4565b610804565b005b3480156102c157600080fd5b506102e56102d03660046120e0565b60009081526020819052604090206001015490565b60405190815260200161025a565b3480156102ff57600080fd5b5061031361030e36600461210d565b6108b5565b60405161025a9190612128565b34801561032c57600080fd5b506102e560001981565b34801561034257600080fd5b5061028361035136600461216f565b61093c565b34801561036257600080fd5b506102b361037136600461218a565b6109d3565b34801561038257600080fd5b506102b361039136600461218a565b6109fe565b3480156103a257600080fd5b506102b36103b1366004612262565b610a17565b6102b36103c43660046123cc565b610b8e565b3480156103d557600080fd5b506103e96103e43660046124bb565b610bcf565b60405161025a91906124fc565b34801561040257600080fd5b50600254610416906001600160a01b031681565b6040516001600160a01b03909116815260200161025a565b34801561043a57600080fd5b5061041661044936600461216f565b6036602052600090815260409020546001600160a01b031681565b34801561047057600080fd5b506102e561047f366004612565565b610e15565b34801561049057600080fd5b506102e561049f366004612565565b610e4b565b3480156104b057600080fd5b506102b36104bf36600461216f565b610eac565b3480156104d057600080fd5b50603854610416906001600160a01b031681565b6102b36104f23660046125d3565b610f12565b34801561050357600080fd5b506035546104169064010000000090046001600160a01b031681565b34801561052b57600080fd5b5061028361053a3660046124bb565b610fbc565b6102b361054d36600461269e565b61103b565b34801561055e57600080fd5b5061028361056d36600461218a565b61113e565b34801561057e57600080fd5b506105de61058d36600461210d565b603460205260009081526040902080546001909101546001600160401b038083169261ffff600160401b820416926001600160801b03600160501b90920482169291811691600160801b9091041685565b604080516001600160401b03968716815261ffff90951660208601526001600160801b03938416908501529116606083015291909116608082015260a00161025a565b34801561062d57600080fd5b506102e5600081565b34801561064257600080fd5b506102e5610651366004612710565b611167565b34801561066257600080fd5b506102b3610671366004612762565b6111c6565b34801561068257600080fd5b50603754610416906001600160a01b031681565b3480156106a257600080fd5b506102b36106b136600461216f565b61122e565b3480156106c257600080fd5b506102e56106d1366004612710565b6113a6565b3480156106e257600080fd5b506102b36106f136600461277d565b6113da565b6102b3610704366004612802565b611446565b34801561071557600080fd5b5060375461073090600160a01b90046001600160401b031681565b6040516001600160401b03909116815260200161025a565b34801561075457600080fd5b506102b361076336600461218a565b61150c565b6102b3610776366004612836565b611531565b34801561078757600080fd5b506102836107963660046128b5565b61192b565b3480156107a757600080fd5b506035546107b89063ffffffff1681565b60405163ffffffff909116815260200161025a565b60006001600160e01b03198216637965db0b60e01b14806107fe57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020612e7383398151915261081c81611a58565b6108467f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de8561113e565b61086357604051635ee08b9760e01b815260040160405180910390fd5b604080516001600160a01b038087168252851660208201529081018390527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb906060015b60405180910390a150505050565b63ffffffff811660009081526039602090815260409182902080548351818402810184019094528084526060939283018282801561093057602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116109015790505b50505050509050919050565b60006109687f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e48361113e565b1561097557506000919050565b603754600160a01b90046001600160401b031615806109b957506109b97f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca8361113e565b156109c657506001919050565b506000919050565b919050565b6000828152602081905260409020600101546109ee81611a58565b6109f88383611a65565b50505050565b60405163dec9f03160e01b815260040160405180910390fd5b600080516020612e73833981519152610a2f81611a58565b60005b8251811015610b52576000838281518110610a4f57610a4f612901565b6020908102919091018101516040805160a08082018352838501516001600160401b03908116835260608086015161ffff9081168589019081526080808901516001600160801b03908116888a01908152968a01518116948801948552888a01518616918801918252985163ffffffff1660009081526034909a529690982094518554985194518816600160501b026fffffffffffffffffffffffffffffffff60501b1995909216600160401b0269ffffffffffffffffffff1990991690841617979097179290921695909517825551600191820180549351909516600160801b026001600160c01b031990931693169290921717909155919091019050610a32565b507fb99f6de5e22c60c178b03bfacf2daeb4b6089f5b37e0fe2c48a5d5141191fc5382604051610b829190612917565b60405180910390a15050565b600080516020612e73833981519152610ba681611a58565b610bae611af8565b610bbc878787878787611b22565b50610bc660018055565b50505050505050565b60025482516020840151604080860151905163c9fc7bcd60e01b81526001600160a01b03868116600483015263ffffffff909416602482015260448101929092526001600160401b031660648201526000928392169063c9fc7bcd90608401602060405180830381865afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f91906129b4565b905080158015610d1d5750600254845160208601516040516305b17bb760e41b81526001600160a01b03878116600483015263ffffffff90931660248201526044810191909152911690635b17bb7090606401602060405180830381865afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0391906129cd565b6001600160401b031684604001516001600160401b031611155b15610d2c5760039150506107fe565b6000198114801590610ddc57506002548451602086015160405163283750ff60e21b81526001600160a01b03878116600483015263ffffffff9093166024820152604481019190915291169063a0dd43fc90606401602060405180830381865afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc291906129cd565b6001600160401b031684604001516001600160401b031611155b15610deb5760029150506107fe565b8015801590610dfc57506000198114155b15610e0b5760019150506107fe565b5060009392505050565b600084610e218161093c565b610e3e57604051634ab5ebcd60e01b815260040160405180910390fd5b5060009695505050505050565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de610e7781611a58565b85610e818161093c565b610e9e57604051634ab5ebcd60e01b815260040160405180910390fd5b506000979650505050505050565b600080516020612e73833981519152610ec481611a58565b603880546001600160a01b0319166001600160a01b0384169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d90602001610b82565b600080516020612e73833981519152610f2a81611a58565b610f32611af8565b6002546040516391d20fa160e01b81526001600160a01b03909116906391d20fa19084903490610f74908f908f908f908f908f908f908f908f90600401612a13565b6000604051808303818589803b158015610f8d57600080fd5b5088f1158015610fa1573d6000803e3d6000fd5b505050505050610fb060018055565b50505050505050505050565b60025460405163861e1ca560e01b81526000916001600160a01b03169063861e1ca590610fef9086908690600401612a73565b602060405180830381865afa925050508015611028575060408051601f3d908101601f1916820190925261102591810190612ab1565b60015b611034575060006107fe565b90506107fe565b600080516020612e7383398151915261105381611a58565b61105b611af8565b60355460009061108290602085019063ffffffff1661107a828761216f565b898989611b22565b905060006110908234612ae9565b6002549091506001600160a01b0316630c0c389e60e086013583602088016110b8818a61216f565b60808a01356110ca60a08c018c612afc565b6110d760c08e018e612afc565b6040518a63ffffffff1660e01b81526004016110f99796959493929190612b7f565b6000604051808303818589803b15801561111257600080fd5b5088f1158015611126573d6000803e3d6000fd5b505050505050505061113760018055565b5050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de61119381611a58565b8461119d8161093c565b6111ba57604051634ab5ebcd60e01b815260040160405180910390fd5b50600095945050505050565b600080516020612e738339815191526111de81611a58565b6037805461ffff60e01b1916600160e01b61ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001610b82565b60006112587fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116611297576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556112ac565b336001600160a01b038216146112ac57600080fd5b60006112b6611c89565b805490915060ff600160401b82041615906001600160401b03166000811580156112dd5750825b90506000826001600160401b031660011480156112f95750303b155b905081158015611307575080155b156113255760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561134f57845460ff60401b1916600160401b1785555b61135887611cb2565b8315610bc657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a150505050505050565b6000836113b28161093c565b6113cf57604051634ab5ebcd60e01b815260040160405180910390fd5b506000949350505050565b600080516020612e738339815191526113f281611a58565b63ffffffff84166000908152603960205260409020611412908484611fa5565b507f7a68270ca5c336167a62e36d8b7a73fecfabd6ce0ddc70be859bf4e2e3fb02d48484846040516108a793929190612bd5565b600080516020612e7383398151915261145e81611a58565b611466611af8565b6002546001600160a01b0316630c0c389e60e0840135346020860161148b818861216f565b608088013561149d60a08a018a612afc565b6114aa60c08c018c612afc565b6040518a63ffffffff1660e01b81526004016114cc9796959493929190612b7f565b6000604051808303818589803b1580156114e557600080fd5b5088f11580156114f9573d6000803e3d6000fd5b50505050505061150860018055565b5050565b60008281526020819052604090206001015461152781611a58565b6109f88383611cc3565b600061155561154536869003860186612c34565b6103e4608087016060880161216f565b9050600381600381111561156b5761156b6124e6565b0361158957604051631fe9c3ef60e11b815260040160405180910390fd5b600281600381111561159d5761159d6124e6565b146118365760355460009064010000000090046001600160a01b0316156115d75760355464010000000090046001600160a01b03166115d9565b855b9050600060016115ef6060880160408901612c50565b6115fc602089018961210d565b60355460208a01359063ffffffff1661161b60808c0160608d0161216f565b60405160f89690961b6001600160f81b031916602087015260c09490941b6001600160c01b031916602186015260e092831b6001600160e01b03199081166029870152602d86019290925290911b16604d8301526001600160a01b0316605182015260710160408051601f198184030181529190529050600060808701356116a660a0890189612afc565b6040516020016116b893929190612c6d565b60408051601f1981840301815291815281516020928301206001600160a01b03808716600090815260369094529190922054919250168061170c576040516303776d1560e31b815260040160405180910390fd5b6040516327d12cd960e01b81526000906001600160a01b038316906327d12cd99061173d9087908790600401612c87565b602060405180830381865afa15801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177e9190612cdc565b90506001816003811115611794576117946124e6565b036117fe57604051630894edf160e01b81526001600160a01b03861690630894edf1906117c79087908790600401612c87565b600060405180830381600087803b1580156117e157600080fd5b505af11580156117f5573d6000803e3d6000fd5b50505050611830565b6000816003811115611812576118126124e6565b03611830576040516306f5423360e11b815260040160405180910390fd5b50505050505b60005b82811015611882573684848381811061185457611854612901565b604002919091019150611879905061186f602083018361216f565b8260200135611d4d565b50600101611839565b506002546001600160a01b0316630c0c389e60e0860135610100870135876118b0608082016060830161216f565b60808a01356118c260a08c018c612afc565b6118cf60c08e018e612afc565b6040518a63ffffffff1660e01b81526004016118f19796959493929190612b7f565b6000604051808303818589803b15801561190a57600080fd5b5088f115801561191e573d6000803e3d6000fd5b5050505050505050505050565b6002548451604051639d7f977560e01b81526001600160a01b03868116600483015263ffffffff909216602482015284821660448201526000929190911690639d7f977590606401602060405180830381865afa158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b49190612ab1565b6119c057506000611a50565b60025460405163c9a54a9960e01b81526001600160a01b039091169063c9a54a99906119f29088908890600401612a73565b602060405180830381865afa158015611a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a339190612ab1565b611a3f57506000611a50565b81611a4c57506000611a50565b5060015b949350505050565b611a628133611e04565b50565b60007f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca83148015611a9d5750611a9b838361113e565b155b15611ae75760378054601490611ac290600160a01b90046001600160401b0316612cfd565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b611af18383611e3d565b9392505050565b600260015403611b1b57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600080836001600160401b03811115611b3d57611b3d6121b6565b604051908082528060200260200182016040528015611b66578160200160208202803683370190505b50905060005b84811015611c3c576000868683818110611b8857611b88612901565b905060400201803603810190611b9e9190612d23565b9050600081600001516001600160a01b031682602001518790604051600060405180830381858888f193505050503d8060008114611bf8576040519150601f19603f3d011682016040523d82523d6000602084013e611bfd565b606091505b5050905080848481518110611c1457611c14612901565b911515602092830291909101820152820151611c309086612d79565b94505050600101611b6c565b507f1f48172553121d8bf273ce457a5a3dd180d464e0add3e0143045b7fa039c3468888888888886604051611c7696959493929190612dca565b60405180910390a1509695505050505050565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006107fe565b611cba611ecf565b611a6281611ef6565b60007f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca83148015611cf95750611cf9838361113e565b15611d435760378054601490611d1e90600160a01b90046001600160401b0316612e4f565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b611af18383611f20565b6001600160a01b038216611d74576040516306b7a93160e41b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611dc1576040519150601f19603f3d011682016040523d82523d6000602084013e611dc6565b606091505b5050905080611dff57604051631196f20d60e21b81526001600160a01b0384166004820152602481018390526044015b60405180910390fd5b505050565b611e0e828261113e565b6115085760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401611df6565b6000611e49838361113e565b611ec7576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055611e7f3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016107fe565b5060006107fe565b611ed7611f8b565b611ef457604051631afcd79f60e31b815260040160405180910390fd5b565b611efe611ecf565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000611f2c838361113e565b15611ec7576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016107fe565b6000611f95611c89565b54600160401b900460ff16919050565b82805482825590600052602060002090601f0160209004810192821561203e5791602002820160005b8382111561200f57833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302611fce565b801561203c5782816101000a81549060ff021916905560010160208160000104928301926001030261200f565b505b5061204a92915061204e565b5090565b5b8082111561204a576000815560010161204f565b60006020828403121561207557600080fd5b81356001600160e01b031981168114611af157600080fd5b80356001600160a01b03811681146109ce57600080fd5b6000806000606084860312156120b957600080fd5b6120c28461208d565b92506120d06020850161208d565b9150604084013590509250925092565b6000602082840312156120f257600080fd5b5035919050565b803563ffffffff811681146109ce57600080fd5b60006020828403121561211f57600080fd5b611af1826120f9565b6020808252825182820181905260009190848201906040850190845b8181101561216357835160ff1683529284019291840191600101612144565b50909695505050505050565b60006020828403121561218157600080fd5b611af18261208d565b6000806040838503121561219d57600080fd5b823591506121ad6020840161208d565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156121ee576121ee6121b6565b60405290565b604051601f8201601f191681016001600160401b038111828210171561221c5761221c6121b6565b604052919050565b6001600160401b0381168114611a6257600080fd5b803561ffff811681146109ce57600080fd5b80356001600160801b03811681146109ce57600080fd5b6000602080838503121561227557600080fd5b82356001600160401b038082111561228c57600080fd5b818501915085601f8301126122a057600080fd5b8135818111156122b2576122b26121b6565b6122c0848260051b016121f4565b818152848101925060c09182028401850191888311156122df57600080fd5b938501935b828510156123755780858a0312156122fc5760008081fd5b6123046121cc565b61230d866120f9565b81528686013561231c81612224565b8188015260408681013561232f81612224565b908201526060612340878201612239565b90820152608061235187820161224b565b9082015260a061236287820161224b565b90820152845293840193928501926122e4565b50979650505050505050565b60008083601f84011261239357600080fd5b5081356001600160401b038111156123aa57600080fd5b6020830191508360208260061b85010111156123c557600080fd5b9250929050565b60008060008060008086880360e08112156123e657600080fd5b60608112156123f457600080fd5b50869550612404606088016120f9565b94506124126080880161208d565b935060a08701356001600160401b0381111561242d57600080fd5b61243989828a01612381565b979a969950949794969560c090950135949350505050565b60006060828403121561246357600080fd5b604051606081018181106001600160401b0382111715612485576124856121b6565b604052905080612494836120f9565b81526020830135602082015260408301356124ae81612224565b6040919091015292915050565b600080608083850312156124ce57600080fd5b6124d88484612451565b91506121ad6060840161208d565b634e487b7160e01b600052602160045260246000fd5b602081016004831061251e57634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f84011261253657600080fd5b5081356001600160401b0381111561254d57600080fd5b6020830191508360208285010111156123c557600080fd5b60008060008060006080868803121561257d57600080fd5b612586866120f9565b94506125946020870161208d565b93506040860135925060608601356001600160401b038111156125b657600080fd5b6125c288828901612524565b969995985093965092949392505050565b600080600080600080600080600060e08a8c0312156125f157600080fd5b6125fa8a61208d565b985061260860208b0161208d565b975060408a0135965061261d60608b01612239565b955060808a01356001600160401b038082111561263957600080fd5b6126458d838e01612524565b909750955060a08c013591508082111561265e57600080fd5b5061266b8c828d01612524565b9a9d999c50979a9699959894979660c00135949350505050565b6000610100828403121561269857600080fd5b50919050565b600080600080606085870312156126b457600080fd5b84356001600160401b03808211156126cb57600080fd5b6126d788838901612381565b90965094506020870135935060408701359150808211156126f757600080fd5b5061270487828801612685565b91505092959194509250565b60008060006040848603121561272557600080fd5b61272e8461208d565b925060208401356001600160401b0381111561274957600080fd5b61275586828701612524565b9497909650939450505050565b60006020828403121561277457600080fd5b611af182612239565b60008060006040848603121561279257600080fd5b61279b846120f9565b925060208401356001600160401b03808211156127b757600080fd5b818601915086601f8301126127cb57600080fd5b8135818111156127da57600080fd5b8760208260051b85010111156127ef57600080fd5b6020830194508093505050509250925092565b60006020828403121561281457600080fd5b81356001600160401b0381111561282a57600080fd5b611a5084828501612685565b6000806000806060858703121561284c57600080fd5b6128558561208d565b935060208501356001600160401b038082111561287157600080fd5b90860190610120828903121561288657600080fd5b9093506040860135908082111561289c57600080fd5b506128a987828801612381565b95989497509550505050565b60008060008060c085870312156128cb57600080fd5b6128d58686612451565b93506128e36060860161208d565b92506128f16080860161208d565b9396929550929360a00135925050565b634e487b7160e01b600052603260045260246000fd5b602080825282518282018190526000919060409081850190868401855b828110156129a7578151805163ffffffff168552868101516001600160401b039081168887015286820151168686015260608082015161ffff16908601526080808201516001600160801b039081169187019190915260a091820151169085015260c09093019290850190600101612934565b5091979650505050505050565b6000602082840312156129c657600080fd5b5051919050565b6000602082840312156129df57600080fd5b8151611af181612224565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038981168252881660208201526040810187905261ffff8616606082015260c060808201819052600090612a5190830186886129ea565b82810360a0840152612a648185876129ea565b9b9a5050505050505050505050565b825163ffffffff168152602080840151908201526040928301516001600160401b0316928101929092526001600160a01b0316606082015260800190565b600060208284031215612ac357600080fd5b81518015158114611af157600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156107fe576107fe612ad3565b6000808335601e19843603018112612b1357600080fd5b8301803591506001600160401b03821115612b2d57600080fd5b6020019150368190038213156123c557600080fd5b63ffffffff612b50826120f9565b168252602081013560208301526040810135612b6b81612224565b6001600160401b0381166040840152505050565b612b898189612b42565b60018060a01b038716606082015285608082015260e060a08201526000612bb460e0830186886129ea565b82810360c0840152612bc78185876129ea565b9a9950505050505050505050565b63ffffffff841681526040602080830182905290820183905260009084906060840183805b87811015612c2657843560ff8116808214612c13578384fd5b8452509383019391830191600101612bfa565b509098975050505050505050565b600060608284031215612c4657600080fd5b611af18383612451565b600060208284031215612c6257600080fd5b8135611af181612224565b838152818360208301376000910160200190815292915050565b604081526000835180604084015260005b81811015612cb55760208187018101516060868401015201612c98565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b600060208284031215612cee57600080fd5b815160048110611af157600080fd5b60006001600160401b03808316818103612d1957612d19612ad3565b6001019392505050565b600060408284031215612d3557600080fd5b604051604081018181106001600160401b0382111715612d5757612d576121b6565b604052612d638361208d565b8152602083013560208201528091505092915050565b808201808211156107fe576107fe612ad3565b60008151808452602080850194506020840160005b83811015612dbf578151151587529582019590820190600101612da1565b509495945050505050565b600060e08201612dda838a612b42565b63ffffffff881660608401526001600160a01b03878116608085015260e060a0850152908590528590610100840160005b87811015612e3c5782612e1d8561208d565b1682526020848101359083015260409384019390910190600101612e0b565b5084810360c0860152612a648187612d8c565b60006001600160401b03821680612e6857612e68612ad3565b600019019291505056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122036505fcf70e65693eb675dd5dddfd012af700b4c33e53735f756633d39c0de9964736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106102245760003560e01c8063843c7b0e11610123578063c4d66de8116100ab578063d2ae21041161006f578063d2ae210414610709578063d547741f14610748578063dcfdeb6014610768578063e1e3a7df1461077b578063e395eb5c1461079b57600080fd5b8063c4d66de814610696578063c8f8dcd1146106b6578063cb5026b914610621578063cd88b903146106d6578063cfc32570146106f657600080fd5b80639e944965116100f25780639e94496514610572578063a217fddf14610621578063c015bb7d14610636578063c358de0a14610656578063c416aa511461067657600080fd5b8063843c7b0e146104f7578063861e1ca51461051f5780638624ba071461053f57806391d148541461055257600080fd5b80633d85ac33116101b1578063709eb66411610175578063709eb66414610464578063717e8a4214610484578063724e78da146104a4578063741bef1a146104c45780637cd44734146104e457600080fd5b80633d85ac3314610396578063475b6d9e146103b65780634b4b2efb146103c95780635e280f11146103f65780636f1788351461042e57600080fd5b806326e67a37116101f857806326e67a37146102f35780632baf0be7146103205780632de11376146103365780632f2ff15d1461035657806336568abe1461037657600080fd5b8062bf2e801461022957806301ffc9a7146102635780631095b6d714610293578063248a9ca3146102b5575b600080fd5b34801561023557600080fd5b5060375461024b90600160e01b900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561026f57600080fd5b5061028361027e366004612063565b6107cd565b604051901515815260200161025a565b34801561029f57600080fd5b506102b36102ae3660046120a4565b610804565b005b3480156102c157600080fd5b506102e56102d03660046120e0565b60009081526020819052604090206001015490565b60405190815260200161025a565b3480156102ff57600080fd5b5061031361030e36600461210d565b6108b5565b60405161025a9190612128565b34801561032c57600080fd5b506102e560001981565b34801561034257600080fd5b5061028361035136600461216f565b61093c565b34801561036257600080fd5b506102b361037136600461218a565b6109d3565b34801561038257600080fd5b506102b361039136600461218a565b6109fe565b3480156103a257600080fd5b506102b36103b1366004612262565b610a17565b6102b36103c43660046123cc565b610b8e565b3480156103d557600080fd5b506103e96103e43660046124bb565b610bcf565b60405161025a91906124fc565b34801561040257600080fd5b50600254610416906001600160a01b031681565b6040516001600160a01b03909116815260200161025a565b34801561043a57600080fd5b5061041661044936600461216f565b6036602052600090815260409020546001600160a01b031681565b34801561047057600080fd5b506102e561047f366004612565565b610e15565b34801561049057600080fd5b506102e561049f366004612565565b610e4b565b3480156104b057600080fd5b506102b36104bf36600461216f565b610eac565b3480156104d057600080fd5b50603854610416906001600160a01b031681565b6102b36104f23660046125d3565b610f12565b34801561050357600080fd5b506035546104169064010000000090046001600160a01b031681565b34801561052b57600080fd5b5061028361053a3660046124bb565b610fbc565b6102b361054d36600461269e565b61103b565b34801561055e57600080fd5b5061028361056d36600461218a565b61113e565b34801561057e57600080fd5b506105de61058d36600461210d565b603460205260009081526040902080546001909101546001600160401b038083169261ffff600160401b820416926001600160801b03600160501b90920482169291811691600160801b9091041685565b604080516001600160401b03968716815261ffff90951660208601526001600160801b03938416908501529116606083015291909116608082015260a00161025a565b34801561062d57600080fd5b506102e5600081565b34801561064257600080fd5b506102e5610651366004612710565b611167565b34801561066257600080fd5b506102b3610671366004612762565b6111c6565b34801561068257600080fd5b50603754610416906001600160a01b031681565b3480156106a257600080fd5b506102b36106b136600461216f565b61122e565b3480156106c257600080fd5b506102e56106d1366004612710565b6113a6565b3480156106e257600080fd5b506102b36106f136600461277d565b6113da565b6102b3610704366004612802565b611446565b34801561071557600080fd5b5060375461073090600160a01b90046001600160401b031681565b6040516001600160401b03909116815260200161025a565b34801561075457600080fd5b506102b361076336600461218a565b61150c565b6102b3610776366004612836565b611531565b34801561078757600080fd5b506102836107963660046128b5565b61192b565b3480156107a757600080fd5b506035546107b89063ffffffff1681565b60405163ffffffff909116815260200161025a565b60006001600160e01b03198216637965db0b60e01b14806107fe57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020612e7383398151915261081c81611a58565b6108467f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de8561113e565b61086357604051635ee08b9760e01b815260040160405180910390fd5b604080516001600160a01b038087168252851660208201529081018390527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb906060015b60405180910390a150505050565b63ffffffff811660009081526039602090815260409182902080548351818402810184019094528084526060939283018282801561093057602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116109015790505b50505050509050919050565b60006109687f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e48361113e565b1561097557506000919050565b603754600160a01b90046001600160401b031615806109b957506109b97f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca8361113e565b156109c657506001919050565b506000919050565b919050565b6000828152602081905260409020600101546109ee81611a58565b6109f88383611a65565b50505050565b60405163dec9f03160e01b815260040160405180910390fd5b600080516020612e73833981519152610a2f81611a58565b60005b8251811015610b52576000838281518110610a4f57610a4f612901565b6020908102919091018101516040805160a08082018352838501516001600160401b03908116835260608086015161ffff9081168589019081526080808901516001600160801b03908116888a01908152968a01518116948801948552888a01518616918801918252985163ffffffff1660009081526034909a529690982094518554985194518816600160501b026fffffffffffffffffffffffffffffffff60501b1995909216600160401b0269ffffffffffffffffffff1990991690841617979097179290921695909517825551600191820180549351909516600160801b026001600160c01b031990931693169290921717909155919091019050610a32565b507fb99f6de5e22c60c178b03bfacf2daeb4b6089f5b37e0fe2c48a5d5141191fc5382604051610b829190612917565b60405180910390a15050565b600080516020612e73833981519152610ba681611a58565b610bae611af8565b610bbc878787878787611b22565b50610bc660018055565b50505050505050565b60025482516020840151604080860151905163c9fc7bcd60e01b81526001600160a01b03868116600483015263ffffffff909416602482015260448101929092526001600160401b031660648201526000928392169063c9fc7bcd90608401602060405180830381865afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f91906129b4565b905080158015610d1d5750600254845160208601516040516305b17bb760e41b81526001600160a01b03878116600483015263ffffffff90931660248201526044810191909152911690635b17bb7090606401602060405180830381865afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0391906129cd565b6001600160401b031684604001516001600160401b031611155b15610d2c5760039150506107fe565b6000198114801590610ddc57506002548451602086015160405163283750ff60e21b81526001600160a01b03878116600483015263ffffffff9093166024820152604481019190915291169063a0dd43fc90606401602060405180830381865afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc291906129cd565b6001600160401b031684604001516001600160401b031611155b15610deb5760029150506107fe565b8015801590610dfc57506000198114155b15610e0b5760019150506107fe565b5060009392505050565b600084610e218161093c565b610e3e57604051634ab5ebcd60e01b815260040160405180910390fd5b5060009695505050505050565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de610e7781611a58565b85610e818161093c565b610e9e57604051634ab5ebcd60e01b815260040160405180910390fd5b506000979650505050505050565b600080516020612e73833981519152610ec481611a58565b603880546001600160a01b0319166001600160a01b0384169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d90602001610b82565b600080516020612e73833981519152610f2a81611a58565b610f32611af8565b6002546040516391d20fa160e01b81526001600160a01b03909116906391d20fa19084903490610f74908f908f908f908f908f908f908f908f90600401612a13565b6000604051808303818589803b158015610f8d57600080fd5b5088f1158015610fa1573d6000803e3d6000fd5b505050505050610fb060018055565b50505050505050505050565b60025460405163861e1ca560e01b81526000916001600160a01b03169063861e1ca590610fef9086908690600401612a73565b602060405180830381865afa925050508015611028575060408051601f3d908101601f1916820190925261102591810190612ab1565b60015b611034575060006107fe565b90506107fe565b600080516020612e7383398151915261105381611a58565b61105b611af8565b60355460009061108290602085019063ffffffff1661107a828761216f565b898989611b22565b905060006110908234612ae9565b6002549091506001600160a01b0316630c0c389e60e086013583602088016110b8818a61216f565b60808a01356110ca60a08c018c612afc565b6110d760c08e018e612afc565b6040518a63ffffffff1660e01b81526004016110f99796959493929190612b7f565b6000604051808303818589803b15801561111257600080fd5b5088f1158015611126573d6000803e3d6000fd5b505050505050505061113760018055565b5050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de61119381611a58565b8461119d8161093c565b6111ba57604051634ab5ebcd60e01b815260040160405180910390fd5b50600095945050505050565b600080516020612e738339815191526111de81611a58565b6037805461ffff60e01b1916600160e01b61ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001610b82565b60006112587fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116611297576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556112ac565b336001600160a01b038216146112ac57600080fd5b60006112b6611c89565b805490915060ff600160401b82041615906001600160401b03166000811580156112dd5750825b90506000826001600160401b031660011480156112f95750303b155b905081158015611307575080155b156113255760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561134f57845460ff60401b1916600160401b1785555b61135887611cb2565b8315610bc657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a150505050505050565b6000836113b28161093c565b6113cf57604051634ab5ebcd60e01b815260040160405180910390fd5b506000949350505050565b600080516020612e738339815191526113f281611a58565b63ffffffff84166000908152603960205260409020611412908484611fa5565b507f7a68270ca5c336167a62e36d8b7a73fecfabd6ce0ddc70be859bf4e2e3fb02d48484846040516108a793929190612bd5565b600080516020612e7383398151915261145e81611a58565b611466611af8565b6002546001600160a01b0316630c0c389e60e0840135346020860161148b818861216f565b608088013561149d60a08a018a612afc565b6114aa60c08c018c612afc565b6040518a63ffffffff1660e01b81526004016114cc9796959493929190612b7f565b6000604051808303818589803b1580156114e557600080fd5b5088f11580156114f9573d6000803e3d6000fd5b50505050505061150860018055565b5050565b60008281526020819052604090206001015461152781611a58565b6109f88383611cc3565b600061155561154536869003860186612c34565b6103e4608087016060880161216f565b9050600381600381111561156b5761156b6124e6565b0361158957604051631fe9c3ef60e11b815260040160405180910390fd5b600281600381111561159d5761159d6124e6565b146118365760355460009064010000000090046001600160a01b0316156115d75760355464010000000090046001600160a01b03166115d9565b855b9050600060016115ef6060880160408901612c50565b6115fc602089018961210d565b60355460208a01359063ffffffff1661161b60808c0160608d0161216f565b60405160f89690961b6001600160f81b031916602087015260c09490941b6001600160c01b031916602186015260e092831b6001600160e01b03199081166029870152602d86019290925290911b16604d8301526001600160a01b0316605182015260710160408051601f198184030181529190529050600060808701356116a660a0890189612afc565b6040516020016116b893929190612c6d565b60408051601f1981840301815291815281516020928301206001600160a01b03808716600090815260369094529190922054919250168061170c576040516303776d1560e31b815260040160405180910390fd5b6040516327d12cd960e01b81526000906001600160a01b038316906327d12cd99061173d9087908790600401612c87565b602060405180830381865afa15801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177e9190612cdc565b90506001816003811115611794576117946124e6565b036117fe57604051630894edf160e01b81526001600160a01b03861690630894edf1906117c79087908790600401612c87565b600060405180830381600087803b1580156117e157600080fd5b505af11580156117f5573d6000803e3d6000fd5b50505050611830565b6000816003811115611812576118126124e6565b03611830576040516306f5423360e11b815260040160405180910390fd5b50505050505b60005b82811015611882573684848381811061185457611854612901565b604002919091019150611879905061186f602083018361216f565b8260200135611d4d565b50600101611839565b506002546001600160a01b0316630c0c389e60e0860135610100870135876118b0608082016060830161216f565b60808a01356118c260a08c018c612afc565b6118cf60c08e018e612afc565b6040518a63ffffffff1660e01b81526004016118f19796959493929190612b7f565b6000604051808303818589803b15801561190a57600080fd5b5088f115801561191e573d6000803e3d6000fd5b5050505050505050505050565b6002548451604051639d7f977560e01b81526001600160a01b03868116600483015263ffffffff909216602482015284821660448201526000929190911690639d7f977590606401602060405180830381865afa158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b49190612ab1565b6119c057506000611a50565b60025460405163c9a54a9960e01b81526001600160a01b039091169063c9a54a99906119f29088908890600401612a73565b602060405180830381865afa158015611a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a339190612ab1565b611a3f57506000611a50565b81611a4c57506000611a50565b5060015b949350505050565b611a628133611e04565b50565b60007f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca83148015611a9d5750611a9b838361113e565b155b15611ae75760378054601490611ac290600160a01b90046001600160401b0316612cfd565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b611af18383611e3d565b9392505050565b600260015403611b1b57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600080836001600160401b03811115611b3d57611b3d6121b6565b604051908082528060200260200182016040528015611b66578160200160208202803683370190505b50905060005b84811015611c3c576000868683818110611b8857611b88612901565b905060400201803603810190611b9e9190612d23565b9050600081600001516001600160a01b031682602001518790604051600060405180830381858888f193505050503d8060008114611bf8576040519150601f19603f3d011682016040523d82523d6000602084013e611bfd565b606091505b5050905080848481518110611c1457611c14612901565b911515602092830291909101820152820151611c309086612d79565b94505050600101611b6c565b507f1f48172553121d8bf273ce457a5a3dd180d464e0add3e0143045b7fa039c3468888888888886604051611c7696959493929190612dca565b60405180910390a1509695505050505050565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006107fe565b611cba611ecf565b611a6281611ef6565b60007f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca83148015611cf95750611cf9838361113e565b15611d435760378054601490611d1e90600160a01b90046001600160401b0316612e4f565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b611af18383611f20565b6001600160a01b038216611d74576040516306b7a93160e41b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611dc1576040519150601f19603f3d011682016040523d82523d6000602084013e611dc6565b606091505b5050905080611dff57604051631196f20d60e21b81526001600160a01b0384166004820152602481018390526044015b60405180910390fd5b505050565b611e0e828261113e565b6115085760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401611df6565b6000611e49838361113e565b611ec7576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055611e7f3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016107fe565b5060006107fe565b611ed7611f8b565b611ef457604051631afcd79f60e31b815260040160405180910390fd5b565b611efe611ecf565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000611f2c838361113e565b15611ec7576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016107fe565b6000611f95611c89565b54600160401b900460ff16919050565b82805482825590600052602060002090601f0160209004810192821561203e5791602002820160005b8382111561200f57833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302611fce565b801561203c5782816101000a81549060ff021916905560010160208160000104928301926001030261200f565b505b5061204a92915061204e565b5090565b5b8082111561204a576000815560010161204f565b60006020828403121561207557600080fd5b81356001600160e01b031981168114611af157600080fd5b80356001600160a01b03811681146109ce57600080fd5b6000806000606084860312156120b957600080fd5b6120c28461208d565b92506120d06020850161208d565b9150604084013590509250925092565b6000602082840312156120f257600080fd5b5035919050565b803563ffffffff811681146109ce57600080fd5b60006020828403121561211f57600080fd5b611af1826120f9565b6020808252825182820181905260009190848201906040850190845b8181101561216357835160ff1683529284019291840191600101612144565b50909695505050505050565b60006020828403121561218157600080fd5b611af18261208d565b6000806040838503121561219d57600080fd5b823591506121ad6020840161208d565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156121ee576121ee6121b6565b60405290565b604051601f8201601f191681016001600160401b038111828210171561221c5761221c6121b6565b604052919050565b6001600160401b0381168114611a6257600080fd5b803561ffff811681146109ce57600080fd5b80356001600160801b03811681146109ce57600080fd5b6000602080838503121561227557600080fd5b82356001600160401b038082111561228c57600080fd5b818501915085601f8301126122a057600080fd5b8135818111156122b2576122b26121b6565b6122c0848260051b016121f4565b818152848101925060c09182028401850191888311156122df57600080fd5b938501935b828510156123755780858a0312156122fc5760008081fd5b6123046121cc565b61230d866120f9565b81528686013561231c81612224565b8188015260408681013561232f81612224565b908201526060612340878201612239565b90820152608061235187820161224b565b9082015260a061236287820161224b565b90820152845293840193928501926122e4565b50979650505050505050565b60008083601f84011261239357600080fd5b5081356001600160401b038111156123aa57600080fd5b6020830191508360208260061b85010111156123c557600080fd5b9250929050565b60008060008060008086880360e08112156123e657600080fd5b60608112156123f457600080fd5b50869550612404606088016120f9565b94506124126080880161208d565b935060a08701356001600160401b0381111561242d57600080fd5b61243989828a01612381565b979a969950949794969560c090950135949350505050565b60006060828403121561246357600080fd5b604051606081018181106001600160401b0382111715612485576124856121b6565b604052905080612494836120f9565b81526020830135602082015260408301356124ae81612224565b6040919091015292915050565b600080608083850312156124ce57600080fd5b6124d88484612451565b91506121ad6060840161208d565b634e487b7160e01b600052602160045260246000fd5b602081016004831061251e57634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f84011261253657600080fd5b5081356001600160401b0381111561254d57600080fd5b6020830191508360208285010111156123c557600080fd5b60008060008060006080868803121561257d57600080fd5b612586866120f9565b94506125946020870161208d565b93506040860135925060608601356001600160401b038111156125b657600080fd5b6125c288828901612524565b969995985093965092949392505050565b600080600080600080600080600060e08a8c0312156125f157600080fd5b6125fa8a61208d565b985061260860208b0161208d565b975060408a0135965061261d60608b01612239565b955060808a01356001600160401b038082111561263957600080fd5b6126458d838e01612524565b909750955060a08c013591508082111561265e57600080fd5b5061266b8c828d01612524565b9a9d999c50979a9699959894979660c00135949350505050565b6000610100828403121561269857600080fd5b50919050565b600080600080606085870312156126b457600080fd5b84356001600160401b03808211156126cb57600080fd5b6126d788838901612381565b90965094506020870135935060408701359150808211156126f757600080fd5b5061270487828801612685565b91505092959194509250565b60008060006040848603121561272557600080fd5b61272e8461208d565b925060208401356001600160401b0381111561274957600080fd5b61275586828701612524565b9497909650939450505050565b60006020828403121561277457600080fd5b611af182612239565b60008060006040848603121561279257600080fd5b61279b846120f9565b925060208401356001600160401b03808211156127b757600080fd5b818601915086601f8301126127cb57600080fd5b8135818111156127da57600080fd5b8760208260051b85010111156127ef57600080fd5b6020830194508093505050509250925092565b60006020828403121561281457600080fd5b81356001600160401b0381111561282a57600080fd5b611a5084828501612685565b6000806000806060858703121561284c57600080fd5b6128558561208d565b935060208501356001600160401b038082111561287157600080fd5b90860190610120828903121561288657600080fd5b9093506040860135908082111561289c57600080fd5b506128a987828801612381565b95989497509550505050565b60008060008060c085870312156128cb57600080fd5b6128d58686612451565b93506128e36060860161208d565b92506128f16080860161208d565b9396929550929360a00135925050565b634e487b7160e01b600052603260045260246000fd5b602080825282518282018190526000919060409081850190868401855b828110156129a7578151805163ffffffff168552868101516001600160401b039081168887015286820151168686015260608082015161ffff16908601526080808201516001600160801b039081169187019190915260a091820151169085015260c09093019290850190600101612934565b5091979650505050505050565b6000602082840312156129c657600080fd5b5051919050565b6000602082840312156129df57600080fd5b8151611af181612224565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038981168252881660208201526040810187905261ffff8616606082015260c060808201819052600090612a5190830186886129ea565b82810360a0840152612a648185876129ea565b9b9a5050505050505050505050565b825163ffffffff168152602080840151908201526040928301516001600160401b0316928101929092526001600160a01b0316606082015260800190565b600060208284031215612ac357600080fd5b81518015158114611af157600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156107fe576107fe612ad3565b6000808335601e19843603018112612b1357600080fd5b8301803591506001600160401b03821115612b2d57600080fd5b6020019150368190038213156123c557600080fd5b63ffffffff612b50826120f9565b168252602081013560208301526040810135612b6b81612224565b6001600160401b0381166040840152505050565b612b898189612b42565b60018060a01b038716606082015285608082015260e060a08201526000612bb460e0830186886129ea565b82810360c0840152612bc78185876129ea565b9a9950505050505050505050565b63ffffffff841681526040602080830182905290820183905260009084906060840183805b87811015612c2657843560ff8116808214612c13578384fd5b8452509383019391830191600101612bfa565b509098975050505050505050565b600060608284031215612c4657600080fd5b611af18383612451565b600060208284031215612c6257600080fd5b8135611af181612224565b838152818360208301376000910160200190815292915050565b604081526000835180604084015260005b81811015612cb55760208187018101516060868401015201612c98565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b600060208284031215612cee57600080fd5b815160048110611af157600080fd5b60006001600160401b03808316818103612d1957612d19612ad3565b6001019392505050565b600060408284031215612d3557600080fd5b604051604081018181106001600160401b0382111715612d5757612d576121b6565b604052612d638361208d565b8152602083013560208201528091505092915050565b808201808211156107fe576107fe612ad3565b60008151808452602080850194506020840160005b83811015612dbf578151151587529582019590820190600101612da1565b509495945050505050565b600060e08201612dda838a612b42565b63ffffffff881660608401526001600160a01b03878116608085015260e060a0850152908590528590610100840160005b87811015612e3c5782612e1d8561208d565b1682526020848101359083015260409384019390910190600101612e0b565b5084810360c0860152612a648187612d8c565b60006001600160401b03821680612e6857612e68612ad3565b600019019291505056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122036505fcf70e65693eb675dd5dddfd012af700b4c33e53735f756633d39c0de9964736f6c63430008160033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "assignJob(address,bytes)": {
        "details": "MOCK: Returns hardcoded 0 fee for read operationsOnly authorized message libraries can call this functionVirtual function - can be overridden for custom fee logic",
        "params": {
          "_options": "Read operation options (ignored in mock)",
          "_sender": "Address requesting the read operation"
        },
        "returns": {
          "fee": "Execution fee (always 0 in mock implementation)"
        }
      },
      "assignJob(uint32,address,uint256,bytes)": {
        "details": "MOCK: Returns hardcoded 0 fee instead of real calculationOnly authorized message libraries can call this functionVirtual function - can be overridden for custom fee logic",
        "params": {
          "_calldataSize": "Size of the execution data",
          "_dstEid": "Destination endpoint ID",
          "_options": "Execution options (ignored in mock)",
          "_sender": "Address requesting the execution"
        },
        "returns": {
          "fee": "Execution fee (always 0 in mock implementation)"
        }
      },
      "compose302(address,address,bytes32,uint16,bytes,bytes,uint256)": {
        "details": "Only admins can call this functionUses try/catch to handle compose failures gracefully with alerts",
        "params": {
          "_extraData": "Additional data for the compose operation",
          "_from": "Address that initiated the compose (contains Origin with srcEid, sender, nonce from original message)",
          "_gasLimit": "Gas limit for the compose execution",
          "_guid": "Global unique identifier for the message",
          "_index": "Index of the compose operation",
          "_message": "Message payload for the compose",
          "_to": "Target contract for the compose operation"
        }
      },
      "constructor": {
        "details": "Deployer automatically gets both DEFAULT_ADMIN_ROLE and ADMIN_ROLEUses address(0) for price feed since fees are mocked",
        "params": {
          "_endpoint": "LayerZero EndpointV2 contract address",
          "_messageLibs": "Array of SEND library addresses that can assign jobs. Recommendation: SendUln302, ReadLib1002."
        }
      },
      "executable((uint32,bytes32,uint64),address)": {
        "details": "check if a message is executable.",
        "returns": {
          "_0": "ExecutionState of Executed, Executable, or NotExecutable"
        }
      },
      "execute302((address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))": {
        "details": "Only admins can call this functionUses try/catch to handle execution failures gracefully with alertsPart of LayerZero V2 protocol - no ULN301 support",
        "params": {
          "_executionParams": "Parameters for message execution including Origin (srcEid, sender, nonce), receiver, guid, message, etc."
        }
      },
      "getFee(address,bytes)": {
        "details": "MOCK: Returns hardcoded 0 fee for read operationsReal executor would calculate based on gas costs and price feedsVirtual function - can be overridden for custom fee logic",
        "params": {
          "_options": "Read operation options (ignored in mock)",
          "_sender": "Address requesting the fee quote"
        },
        "returns": {
          "fee": "Execution fee (always 0 in mock implementation)"
        }
      },
      "getFee(uint32,address,uint256,bytes)": {
        "details": "MOCK: Returns hardcoded 0 fee instead of real calculationReal executor would calculate based on gas costs and price feedsVirtual function - can be overridden for custom fee logic",
        "params": {
          "_calldataSize": "Size of the execution data",
          "_dstEid": "Destination endpoint ID",
          "_options": "Execution options (ignored in mock)",
          "_sender": "Address requesting the fee quote"
        },
        "returns": {
          "fee": "Execution fee (always 0 in mock implementation)"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "nativeDrop((uint32,bytes32,uint64),uint32,address,(address,uint256)[],uint256)": {
        "details": "Only admins can call this functionRequires sufficient msg.value to cover all drops",
        "params": {
          "_dstEid": "Destination endpoint ID",
          "_nativeDropGasLimit": "Gas limit for each native drop call",
          "_nativeDropParams": "Array of native drop parameters (receiver, amount)",
          "_oapp": "OApp address requesting the drop",
          "_origin": "Origin information (srcEid: source chain ID, sender: original sender address, nonce: message sequence)"
        }
      },
      "nativeDropAndExecute302((address,uint256)[],uint256,(address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))": {
        "details": "Only admins can call this functionFirst performs native drops, then executes with remaining msg.valueUses try/catch for execution failures with alerts",
        "params": {
          "_executionParams": "Parameters including Origin (srcEid, sender, nonce) for message execution after drops",
          "_nativeDropGasLimit": "Gas limit for each native drop call",
          "_nativeDropParams": "Array of native drop parameters (receiver, amount)"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setDstConfig((uint32,uint64,uint64,uint16,uint128,uint128)[])": {
        "details": "Only admins can call this functionEmits DstConfigSet event for each configuration update",
        "params": {
          "_params": "Array of destination configuration parameters"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "verifiable((uint32,bytes32,uint64),address,address,bytes32)": {
        "details": "check if a message is verifiable."
      }
    },
    "title": "SimpleExecutorMock",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assignJob(address,bytes)": {
        "notice": "Assigns a read operation job (MOCKED - returns 0 fee)"
      },
      "assignJob(uint32,address,uint256,bytes)": {
        "notice": "Assigns a cross-chain execution job (MOCKED - returns 0 fee)"
      },
      "compose302(address,address,bytes32,uint16,bytes,bytes,uint256)": {
        "notice": "Executes a LayerZero V2 compose operation on the endpoint"
      },
      "constructor": {
        "notice": "Deploys SimpleExecutor with deployer as admin"
      },
      "execute302((address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))": {
        "notice": "Executes a LayerZero V2 message on the endpoint"
      },
      "getFee(address,bytes)": {
        "notice": "Queries execution fee for read operations (MOCKED - returns 0)"
      },
      "getFee(uint32,address,uint256,bytes)": {
        "notice": "Queries execution fee for cross-chain operations (MOCKED - returns 0)"
      },
      "nativeDrop((uint32,bytes32,uint64),uint32,address,(address,uint256)[],uint256)": {
        "notice": "Performs native token drops to specified addresses"
      },
      "nativeDropAndExecute302((address,uint256)[],uint256,(address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))": {
        "notice": "Performs native drops and then executes a LayerZero V2 message"
      },
      "setDstConfig((uint32,uint64,uint64,uint16,uint128,uint128)[])": {
        "notice": "Configures execution parameters for destination chains"
      }
    },
    "notice": "Mock executor for development/testing ONLY - returns 0 fees 🔧 DIFFERENCES FROM REAL EXECUTOR: - Implements IWorker instead of inheriting Worker - avoids OpenZeppelin v4/v5 conflicts - Constructor-based (not initialize()) - NO price feed - hardcoded 0 fees (virtual methods for override) - NO ULN301 support - V2 operations only - NO real fee calculations or economic incentives ⚠️ LIMITATIONS: Zero fees break economic model, cannot upgrade, no mainnet use ✅ USE FOR: Local testing, unit tests, prototyping ❌ DON'T USE: Production, mainnet, real transactions 📝 NOTE: Origin struct contains cross-chain message provenance:   - srcEid: Source chain endpoint ID (e.g., 40161 for Ethereum)   - sender: Original sender address as bytes32   - nonce: Message sequence number for ordering/deduplication",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5621,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)5616_storage)"
      },
      {
        "astId": 7472,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1178,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "endpoint",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILayerZeroEndpointV2)1566"
      },
      {
        "astId": 1362,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8495,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "dstConfig",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_uint32,t_struct(DstConfig)39_storage)"
      },
      {
        "astId": 8497,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "localEidV2",
        "offset": 0,
        "slot": "53",
        "type": "t_uint32"
      },
      {
        "astId": 8499,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "receiveUln302",
        "offset": 4,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 8503,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "receiveLibToView",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8511,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "workerFeeLib",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 8513,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "allowlistSize",
        "offset": 20,
        "slot": "55",
        "type": "t_uint64"
      },
      {
        "astId": 8515,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "defaultMultiplierBps",
        "offset": 28,
        "slot": "55",
        "type": "t_uint16"
      },
      {
        "astId": 8517,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "priceFeed",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 8522,
        "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
        "label": "supportedOptionTypes",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_uint32,t_array(t_uint8)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpointV2)1566": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpointV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)5616_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)5616_storage"
      },
      "t_mapping(t_uint32,t_array(t_uint8)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint8[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint8)dyn_storage"
      },
      "t_mapping(t_uint32,t_struct(DstConfig)39_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IExecutor.DstConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(DstConfig)39_storage"
      },
      "t_struct(DstConfig)39_storage": {
        "encoding": "inplace",
        "label": "struct IExecutor.DstConfig",
        "members": [
          {
            "astId": 30,
            "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
            "label": "lzReceiveBaseGas",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 32,
            "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
            "label": "multiplierBps",
            "offset": 8,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 34,
            "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
            "label": "floorMarginUSD",
            "offset": 10,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 36,
            "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
            "label": "nativeCap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 38,
            "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
            "label": "lzComposeBaseGas",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)5616_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 5613,
            "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5615,
            "contract": "contracts/mocks/SimpleExecutorMock.sol:SimpleExecutorMock",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}